{"version":3,"sources":["ImageAngle.js","GunState.js","Bullet.js","../../src/Scene.js","GunData.js","Gun.js","Hero.js","UnitAngle.js","HeroPrefab.js","Boundary.js","Monster.js","Slime.js","Crosshair.js","shooter.js"],"names":["Component","ImageAngle","image","angle","options","defaultXScale","offset","Math","PI","length","Dna","deltaTime","radians","increment","index","floor","updateOptions","gameObject","transform","xScale","GunState","gunData","audio","Components","Audio","volume","reloading","clipAmmo","clipSize","extraAmmo","GameObject","SPEED","RADIUS","DAMAGE","Bullet","parent","position","hurtboxes","maxDistance","addGameObject","rotation","Utilities","Radians","physics","Physics","speed","callback","destroy","addComponent","Hitcircle","radius","onCollisionEnter","hurtbox","play","gunHit","unit","takeDamage","knockback","Scene","canvases","assets","start","canvas","addCanvas","Assets","key","asset","scene","push","load","then","window","requestAnimationFrame","currTime","gameLoop","Promise","resolve","all","bulletImage","Dom","Image","bulletSprite","flameImage","flameSprite","bulletAssets","bullet","flame","width","height","pistolUpImage","pistolUpSprite","pistolDiagUpImage","pistolDiagUpSprite","pistolSideImage","pistolSideSprite","pistolDiagDownImage","pistolDiagDownSprite","pistolDownImage","pistolDownSprite","pistolAssets","up","diagUp","side","diagDown","down","pistolUp","pistolDiagUp","pistolSide","pistolDiagDown","pistolDown","Pistol","name","shootClip","pistolShoot","emptyClip","pistolEmpty","reloadClip","pistolReload","cooldown","spriteOptions","spread","generateBullets","gun","getCanvas","getAbsoluteCenter","getNewAngle","shotgunUpImage","shotgunUpSprite","shotgunDiagUpImage","shotgunDiagUpSprite","shotgunSideImage","shotgunSideSprite","shotgunDiagDownImage","shotgunDiagDownSprite","shotgunDownImage","shotgunDownSprite","shotgunAssets","shotgunUp","shotgunDiagUp","shotgunSide","shotgunDiagDown","shotgunDown","Shotgun","shotgunShoot","i","flamethrowerUpImage","flamethrowerUpSprite","flamethrowerDiagUpImage","flamethrowerDiagUpSprite","flamethrowerSideImage","flamethrowerSideSprite","flamethrowerDiagDownImage","flamethrowerDiagDownSprite","flamethrowerDownImage","flamethrowerDownSprite","flamethrowerAssets","flamethrowerUp","flamethrowerDiagUp","flamethrowerSide","flamethrowerDiagDown","flamethrowerDown","Flamethrower","flamethrowerShoot","ticksPerFrame","numberOfFrames","gunAssets","bullets","pistol","shotgun","flamethrower","RELOAD_TIME","EMPTY_COOLDOWN","GUN_STATES","GunComponent","gunText","ammoText","reloadingText","gunImage","emptyCooldown","gunIndex","gunState","keyboard","Input","Keyboard","reload","changeWeapon","updateGunText","updateAmmoText","finishReload","setActive","totalAmmo","min","max","stopReload","weaponSwapClip","text","GunPosition","Vector","x","y","Gun","console","log","CLIP_SIZE","TOTAL_AMMO","Hero","announcer","hpBar","mouse","dead","invulnerable","coordinates","Coordinates","damage","source","value","xv","yv","getAngleToTransform","knockbackPhysics","removeComponent","left","add","UNIT_LEFT","right","UNIT_RIGHT","UNIT_UP","UNIT_DOWN","leftClick","shoot","magnitude","UnitAngle","target","heroUpImage","heroUpSheet","heroUpSideImage","heroUpSideSheet","heroSideImage","heroSideSheet","heroDownSideImage","heroDownSideSheet","heroDownImage","heroDownSheet","heroAssets","upSide","downSide","hero_default","loop","heroUp","heroUpSide","heroSide","heroDownSide","heroDown","HeroPrefab","crosshair","heroHitbox","heroImage","Text","hitboxSet","unitAngle","SimplePhysics","Boundary","alignment","getPosition","Rectangle","Hitbox","onCollision","Alignments","TOP","BOTTOM","LEFT","RIGHT","Movement","Ai","hero","range","attack","getDistanceToTransform","Monster","hp","hpSlider","spawner","maxHp","setHpText","maxValue","die","remove","direction","slimeUpImage","slimeUpSheet","slimeSideImage","slimeLeftSheet","slimeDownImage","slimeDownSheet","slimeAssets","BASE_HP","BASE_SPEED","BASE_DAMAGE","LEVEL_SCALING","slime_default","slimeUp","slimeSide","slimeDown","Slime","heroHurtbox","enemyHurtboxes","Slider","emptyColor","pow","level","spawnPositions","SlimeSpawner","monsters","slime","indexOf","splice","delayedSpawn","setTimeout","spawn","CrosshairComponent","crosshairImage","src","Crosshair","floorImage","tileSet","background","StaticCanvas","document","getElementById","type","types","randomTiled","destWidth","destHeight","xWeight","yWeight","wImage","wSprite","aImage","aSprite","sImage","sSprite","dImage","dSprite","tabImage","tabSprite","rImage","rSprite","mouseImage","mouseSprite","leftClickImage","leftClickSprite","foreground","getImageOptions","stretched","controls","moveControls","shootControls","gunControls","Canvas","Mouse","font","ammoTextContainer","guns"],"mappings":"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","file":"shooter.35e1d64c.map","sourceRoot":"..\\demos\\shooter","sourcesContent":["class ImageAngle extends Dna.Component {\n  constructor(image, angle, options, defaultXScale) {\n    super();\n\n    this.image = image;\n    this.angle = angle;\n    this.options = options;\n    this.defaultXScale = defaultXScale;\n\n    this.offset = Math.PI / this.options.length;\n  }\n\n  update(deltaTime) {\n    let angle =\n      ((this.angle.radians % (Math.PI * 2)) + Math.PI * 2) % (Math.PI * 2);\n    let increment = (Math.PI * 2) / this.options.length;\n    let index =\n      (Math.floor((angle + this.offset) / increment) + this.options.length) %\n      this.options.length;\n\n    this.image.updateOptions(this.options[index]);\n\n    this.image.gameObject.transform.xScale =\n      angle < Math.PI ? this.defaultXScale : -this.defaultXScale;\n  }\n}\n\nexport { ImageAngle };\n","class GunState {\n  constructor(gunData) {\n    this.gunData = gunData;\n\n    this.audio = new Dna.Components.Audio({ volume: 0.1 });\n\n    this.reloading = false;\n    this.clipAmmo = gunData.clipSize;\n    this.extraAmmo = gunData.extraAmmo;\n  }\n}\n\nexport { GunState };\n","//TODO store onhitclip in monsterdata\nimport gunHit from \"./assets/sounds/gun_hit.wav\";\n\nconst SPEED = 5;\nconst RADIUS = 2;\n//const MAX_DISTANCE = 500;\nconst DAMAGE = 10;\n\nlet audio = new Dna.Components.Audio({ volume: 0.05 });\n\nclass Bullet extends Dna.GameObject {\n  constructor(parent, position, image, angle, hurtboxes, maxDistance) {\n    super(parent, position, []);\n\n    // this is a nested object to handle rotation seperate from physics\n    this.addGameObject(\n      new Dna.GameObject(\n        this,\n        {\n          rotation: new Dna.Utilities.Radians(angle.radians - Math.PI / 2)\n        },\n        [image]\n      )\n    );\n\n    let physics = new Dna.Components.Physics({\n      speed: SPEED,\n      angle: angle,\n      maxDistance: maxDistance,\n      callback: () => {\n        this.destroy();\n      }\n    });\n    this.addComponent(physics);\n\n    //TODO reverse this logic, keep track of bullet array in hero\n    this.addComponent(\n      new Dna.Components.Hitcircle({\n        radius: RADIUS,\n        hurtboxes: hurtboxes,\n        onCollisionEnter: hurtbox => {\n          this.destroy();\n\n          //audio.play(gunHit);\n          hurtbox.gameObject.audio.play(gunHit);\n\n          hurtbox.gameObject.unit.takeDamage(DAMAGE);\n\n          hurtbox.gameObject.unit.knockback(\n            //this.transform.getCurrentDirection()\n            physics.angle\n          );\n        }\n      })\n    );\n  }\n}\n\nexport { Bullet };\n","class Scene {\n  constructor(canvases, assets, start) {\n    //this.canvases = canvases || [];\n    this.canvases = [];\n    for (let canvas of canvases) {\n      this.addCanvas(canvas);\n    }\n\n    this.assets = assets || new Assets();\n\n    this.start = start;\n  }\n\n  addAssets(key, asset) {\n    this.assets.key = asset;\n  }\n\n  addCanvas(canvas) {\n    canvas.scene = this;\n    this.canvases.push(canvas);\n  }\n\n  //TODO handle gameloop from here\n  load() {\n    this.assets.load.then(() => {\n      this.start();\n      window.requestAnimationFrame(currTime => {\n        for (let canvas of this.canvases) {\n          canvas.gameLoop(currTime);\n        }\n      });\n    });\n  }\n}\n\nclass Assets {\n  constructor(assets = {}) {\n    this.assets = assets;\n\n    this.load = new Promise(resolve => {\n      let assets = [];\n      for (let asset in this.assets) {\n        //TODO get function?\n        assets.push(this.assets[asset].load);\n      }\n      Promise.all(assets).then(resolve);\n    });\n  }\n\n  get(key) {\n    return this.assets[key];\n  }\n}\n\nexport { Scene, Assets };\n","import { Bullet } from \"./Bullet\";\nimport { Assets } from \"../../src/Scene\";\n\nimport pistolShoot from \"./assets/sounds/pistol_shoot.wav\";\nimport shotgunShoot from \"./assets/sounds/shotgun_shoot.wav\";\nimport flamethrowerShoot from \"./assets/sounds/flamethrower_shoot.wav\";\nimport pistolEmpty from \"./assets/sounds/gun_empty.wav\";\nimport pistolReload from \"./assets/sounds/gun_reload.mp3\";\n\nimport bulletSprite from \"./assets/bullets/bullet.png\";\nimport flameSprite from \"./assets/bullets/flame.png\";\nlet bulletImage = new Dna.Dom.Image(bulletSprite);\nlet flameImage = new Dna.Dom.Image(flameSprite);\n\nlet bulletAssets = new Assets({\n  bullet: bulletImage,\n  flame: flameImage\n});\n\n//TODO this forces 1 component onto many objects\nlet bullet = new Dna.Components.Image({\n  width: 6,\n  height: 6,\n  image: bulletImage\n});\n\nimport pistolUpSprite from \"./assets/pistol/up.png\";\nimport pistolDiagUpSprite from \"./assets/pistol/diagup.png\";\nimport pistolSideSprite from \"./assets/pistol/side.png\";\nimport pistolDiagDownSprite from \"./assets/pistol/diagdown.png\";\nimport pistolDownSprite from \"./assets/pistol/down.png\";\nlet pistolUpImage = new Dna.Dom.Image(pistolUpSprite);\nlet pistolDiagUpImage = new Dna.Dom.Image(pistolDiagUpSprite);\nlet pistolSideImage = new Dna.Dom.Image(pistolSideSprite);\nlet pistolDiagDownImage = new Dna.Dom.Image(pistolDiagDownSprite);\nlet pistolDownImage = new Dna.Dom.Image(pistolDownSprite);\n\nlet pistolAssets = new Assets({\n  up: pistolUpImage,\n  diagUp: pistolDiagUpImage,\n  side: pistolSideImage,\n  diagDown: pistolDiagDownImage,\n  down: pistolDownImage\n});\n\nlet pistolUp = {\n  width: 14,\n  height: 12,\n  image: pistolUpImage\n};\nlet pistolDiagUp = {\n  width: 14,\n  height: 12,\n  image: pistolDiagUpImage\n};\nlet pistolSide = {\n  width: 16,\n  height: 8,\n  image: pistolSideImage\n};\nlet pistolDiagDown = {\n  width: 14,\n  height: 11,\n  image: pistolDiagDownImage\n};\nlet pistolDown = {\n  width: 14,\n  height: 12,\n  image: pistolDownImage\n};\n\nlet Pistol = {\n  name: \"Pistol\",\n  shootClip: pistolShoot,\n  emptyClip: pistolEmpty,\n  reloadClip: pistolReload,\n  //bulletImage: bulletImage,\n  clipSize: 20,\n  extraAmmo: 100,\n  cooldown: 0.5,\n  //cooldown: 500,\n  //default option for ui and initialization?\n  spriteOptions: [\n    pistolUp,\n    pistolDiagUp,\n    pistolSide,\n    pistolDiagDown,\n    pistolDown,\n    pistolDiagDown,\n    pistolSide,\n    pistolDiagUp\n  ],\n  spread: new Dna.Utilities.Radians(Math.PI / 16),\n  generateBullets(gun, hurtboxes) {\n    new Bullet(\n      gun.getCanvas(),\n      gun.transform.getAbsoluteCenter(),\n      bullet,\n      gun.angle.getNewAngle(this.spread),\n      hurtboxes,\n      600\n    );\n  }\n};\n\nimport shotgunUpSprite from \"./assets/shotgun/up.png\";\nimport shotgunDiagUpSprite from \"./assets/shotgun/diagup.png\";\nimport shotgunSideSprite from \"./assets/shotgun/side.png\";\nimport shotgunDiagDownSprite from \"./assets/shotgun/diagdown.png\";\nimport shotgunDownSprite from \"./assets/shotgun/down.png\";\nlet shotgunUpImage = new Dna.Dom.Image(shotgunUpSprite);\nlet shotgunDiagUpImage = new Dna.Dom.Image(shotgunDiagUpSprite);\nlet shotgunSideImage = new Dna.Dom.Image(shotgunSideSprite);\nlet shotgunDiagDownImage = new Dna.Dom.Image(shotgunDiagDownSprite);\nlet shotgunDownImage = new Dna.Dom.Image(shotgunDownSprite);\n\nlet shotgunAssets = new Assets({\n  up: shotgunUpImage,\n  diagUp: shotgunDiagUpImage,\n  side: shotgunSideImage,\n  diagDown: shotgunDiagDownImage,\n  down: shotgunDownImage\n});\n\nlet shotgunUp = {\n  width: 8,\n  height: 12,\n  image: shotgunUpImage\n};\nlet shotgunDiagUp = {\n  width: 14,\n  height: 14,\n  image: shotgunDiagUpImage\n};\nlet shotgunSide = {\n  width: 18,\n  height: 9,\n  image: shotgunSideImage\n};\nlet shotgunDiagDown = {\n  width: 17,\n  height: 10,\n  image: shotgunDiagDownImage\n};\nlet shotgunDown = {\n  width: 8,\n  height: 12,\n  image: shotgunDownImage\n};\n\nlet Shotgun = {\n  name: \"Shotgun\",\n  shootClip: shotgunShoot,\n  emptyClip: pistolEmpty,\n  reloadClip: pistolReload,\n  //bulletImage: bulletImage,\n  clipSize: 8,\n  extraAmmo: 50,\n  cooldown: 1.5,\n  //default option for ui and initialization?\n  spriteOptions: [\n    shotgunUp,\n    shotgunDiagUp,\n    shotgunSide,\n    shotgunDiagDown,\n    shotgunDown,\n    shotgunDiagDown,\n    shotgunSide,\n    shotgunDiagUp\n  ],\n  spread: new Dna.Utilities.Radians(Math.PI / 4),\n  generateBullets(gun, hurtboxes) {\n    for (let i = 0; i < 4; i++) {\n      new Bullet(\n        gun.getCanvas(),\n        gun.transform.getAbsoluteCenter(),\n        bullet,\n        gun.angle.getNewAngle(this.spread),\n        hurtboxes,\n        200\n      );\n    }\n  }\n};\n\nimport flamethrowerUpSprite from \"./assets/flamethrower/up.png\";\nimport flamethrowerDiagUpSprite from \"./assets/flamethrower/diagup.png\";\nimport flamethrowerSideSprite from \"./assets/flamethrower/side.png\";\nimport flamethrowerDiagDownSprite from \"./assets/flamethrower/diagdown.png\";\nimport flamethrowerDownSprite from \"./assets/flamethrower/down.png\";\nlet flamethrowerUpImage = new Dna.Dom.Image(flamethrowerUpSprite);\nlet flamethrowerDiagUpImage = new Dna.Dom.Image(flamethrowerDiagUpSprite);\nlet flamethrowerSideImage = new Dna.Dom.Image(flamethrowerSideSprite);\nlet flamethrowerDiagDownImage = new Dna.Dom.Image(flamethrowerDiagDownSprite);\nlet flamethrowerDownImage = new Dna.Dom.Image(flamethrowerDownSprite);\n\nlet flamethrowerAssets = new Assets({\n  up: flamethrowerUpImage,\n  diagUp: flamethrowerDiagUpImage,\n  side: flamethrowerSideImage,\n  diagDown: flamethrowerDiagDownImage,\n  down: flamethrowerDownImage\n});\n\nlet flamethrowerUp = {\n  width: 14,\n  height: 17,\n  image: flamethrowerUpImage\n};\nlet flamethrowerDiagUp = {\n  width: 16,\n  height: 16,\n  image: flamethrowerDiagUpImage\n};\nlet flamethrowerSide = {\n  width: 26,\n  height: 9,\n  image: flamethrowerSideImage\n};\nlet flamethrowerDiagDown = {\n  width: 19,\n  height: 14,\n  image: flamethrowerDiagDownImage\n};\nlet flamethrowerDown = {\n  width: 14,\n  height: 17,\n  image: flamethrowerDownImage\n};\n\nlet Flamethrower = {\n  name: \"Flamethrower\",\n  shootClip: flamethrowerShoot,\n  emptyClip: pistolEmpty,\n  reloadClip: pistolReload,\n  //bulletImage: bulletImage,\n  clipSize: 100,\n  extraAmmo: 1000,\n  cooldown: 0.04,\n  //default option for ui and initialization?\n  spriteOptions: [\n    flamethrowerUp,\n    flamethrowerDiagUp,\n    flamethrowerSide,\n    flamethrowerDiagDown,\n    flamethrowerDown,\n    flamethrowerDiagDown,\n    flamethrowerSide,\n    flamethrowerDiagUp\n  ],\n  spread: new Dna.Utilities.Radians(Math.PI / 6),\n  generateBullets(gun, hurtboxes) {\n    //console.log(gun);\n    //let spread = new Dna.Utilities.Radians(Math.PI / 4);\n    //for (let i = 0; i < 4; i++) {\n    new Bullet(\n      gun.getCanvas(),\n      gun.transform.getAbsoluteCenter(),\n      new Dna.Components.Image({\n        width: 13,\n        height: 10,\n        image: flameImage,\n\n        ticksPerFrame: 5,\n        numberOfFrames: 2\n      }),\n      gun.angle.getNewAngle(this.spread),\n      hurtboxes,\n      200\n    );\n    //}\n  }\n};\n\nlet gunAssets = new Assets({\n  bullets: bulletAssets,\n  pistol: pistolAssets,\n  shotgun: shotgunAssets,\n  flamethrower: flamethrowerAssets\n});\n\nexport { Pistol, Shotgun, Flamethrower, gunAssets };\n","import { ImageAngle } from \"./ImageAngle\";\nimport { GunState } from \"./GunState\";\nimport { Pistol, Shotgun, Flamethrower } from \"./GunData\";\nimport weaponSwapClip from \"./assets/sounds/weapon_swap.mp3\";\n\nconst RELOAD_TIME = 2;\nconst EMPTY_COOLDOWN = 0.5;\nconst GUN_STATES = [\n  new GunState(Pistol),\n  new GunState(Shotgun),\n  new GunState(Flamethrower)\n];\n\nclass GunComponent extends Dna.Component {\n  constructor(gunText, ammoText, reloadingText, gunImage, hurtboxes) {\n    super();\n\n    this.gunText = gunText;\n    this.ammoText = ammoText;\n    this.reloadingText = reloadingText;\n    this.gunImage = gunImage;\n    this.hurtboxes = hurtboxes;\n\n    this.cooldown = 0;\n    this.emptyCooldown = 0;\n    //this.reloading = false;\n    this.reloading = 0;\n\n    this.gunIndex = 0;\n    this.gunState = GUN_STATES[this.gunIndex];\n\n    this.audio = new Dna.Components.Audio({ volume: 0.1 });\n    this.keyboard = new Dna.Input.Keyboard(\n      {},\n      {\n        82: () => {\n          this.reload();\n        },\n        9: () => {\n          this.changeWeapon();\n        }\n      }\n    );\n\n    this.updateGunText();\n    this.updateAmmoText();\n  }\n\n  update(deltaTime) {\n    this.cooldown -= deltaTime;\n    this.emptyCooldown -= deltaTime;\n    if (this.reloading > 0) {\n      this.reloading -= deltaTime;\n      if (this.reloading <= 0) {\n        this.finishReload();\n      }\n    }\n  }\n\n  shoot() {\n    if (this.cooldown > 0) return;\n    if (this.reloading > 0) return;\n    if (this.gunState.clipAmmo <= 0) {\n      if (this.emptyCooldown <= 0) {\n        this.emptyCooldown = EMPTY_COOLDOWN;\n        this.audio.play(this.gunState.gunData.emptyClip);\n      }\n      return;\n    }\n\n    this.gunState.gunData.generateBullets(this.gameObject, this.hurtboxes);\n    this.audio.play(this.gunState.gunData.shootClip);\n\n    this.gunState.clipAmmo--;\n    this.cooldown = this.gunState.gunData.cooldown;\n\n    this.updateAmmoText();\n  }\n\n  reload() {\n    if (this.gunState.clipAmmo >= this.gunState.gunData.clipSize) return;\n    if (this.gunState.extraAmmo <= 0) return;\n    if (this.reloading > 0) return;\n\n    this.reloading = RELOAD_TIME;\n    this.reloadingText.setActive(true);\n\n    this.audio.play(this.gunState.gunData.reloadClip);\n  }\n\n  stopReload() {\n    this.reloading = 0;\n    this.reloadingText.setActive(false);\n  }\n\n  finishReload() {\n    let totalAmmo = this.gunState.clipAmmo + this.gunState.extraAmmo;\n    this.gunState.clipAmmo = Math.min(\n      totalAmmo,\n      this.gunState.gunData.clipSize\n    );\n    this.gunState.extraAmmo = Math.max(0, totalAmmo - this.gunState.clipAmmo);\n\n    this.stopReload();\n    this.updateAmmoText();\n  }\n\n  changeWeapon(gunState) {\n    this.stopReload();\n\n    this.gunIndex = (this.gunIndex + 1) % GUN_STATES.length;\n    this.gunState = GUN_STATES[this.gunIndex];\n\n    this.audio.play(weaponSwapClip);\n\n    this.gunImage.options = this.gunState.gunData.spriteOptions;\n\n    this.updateGunText();\n    this.updateAmmoText();\n  }\n\n  updateGunText() {\n    this.gunText.text = this.gunState.gunData.name;\n  }\n\n  updateAmmoText() {\n    this.ammoText.text = this.gunState.clipAmmo + \"/\" + this.gunState.extraAmmo;\n  }\n}\n\nclass GunPosition extends Dna.Component {\n  constructor(angle) {\n    super();\n\n    //TODO just set this transform.position to be this\n    this.angle = angle;\n    this.position = new Dna.Utilities.Vector(angle, 10);\n  }\n\n  update(deltaTime) {\n    // change transform based on angle\n    this.gameObject.transform.x = this.position.x;\n    this.gameObject.transform.y = this.position.y;\n  }\n}\n\nclass Gun extends Dna.GameObject {\n  constructor(\n    parent,\n    position,\n    angle,\n    hurtboxes,\n    gunText,\n    ammoText,\n    reloadingText\n  ) {\n    console.log(parent);\n    super(parent, position, []);\n\n    this.angle = angle;\n\n    let image = new Dna.Components.Image(\n      GUN_STATES[0].gunData.spriteOptions[0]\n    );\n    new Dna.GameObject(this, {}, [image]);\n\n    this.gunImage = new ImageAngle(\n      image,\n      angle,\n      GUN_STATES[0].gunData.spriteOptions,\n      1\n    );\n    this.addComponent(this.gunImage);\n\n    this.addComponent(new GunPosition(angle));\n\n    this.gun = new GunComponent(\n      gunText,\n      ammoText,\n      reloadingText,\n      this.gunImage,\n      hurtboxes\n    );\n    this.addComponent(this.gun);\n  }\n}\n\nexport { Gun };\n","import { Gun } from \"./Gun\";\nimport { Bullet } from \"./Bullet\";\n\nconst SPEED = 3;\nconst CLIP_SIZE = 20;\nconst TOTAL_AMMO = 100;\nconst RELOAD_TIME = 2;\n\nclass Hero extends Dna.Component {\n  constructor(image, announcer, hpBar, mouse, angle, physics, gun, audio) {\n    super();\n\n    this.keyboard = new Dna.Input.Keyboard({\n      87: \"up\",\n      83: \"down\",\n      65: \"left\",\n      68: \"right\"\n    });\n\n    this.image = image;\n\n    this.announcer = announcer;\n    this.hpBar = hpBar;\n\n    this.mouse = mouse;\n    this.angle = angle;\n    this.physics = physics;\n    this.gun = gun;\n    this.audio = audio;\n\n    this.dead = false;\n    this.invulnerable = 0;\n\n    this.coordinates = new Dna.Utilities.Coordinates(0, 0);\n  }\n\n  takeDamage(damage, source) {\n    if (this.invulnerable > 0) return;\n\n    console.log(\"taking damage: \" + damage);\n    this.hpBar.value -= damage;\n\n    if (this.hpBar.value <= 0) {\n      this.hpBar.value = 0;\n      this.dead = true;\n      this.physics.xv = 0;\n      this.physics.yv = 0;\n\n      this.announcer.text = \"GAME OVER\";\n      this.announcer.gameObject.setActive(true);\n    }\n\n    let angle = source.transform.getAngleToTransform(this.gameObject.transform);\n\n    //TODO angle should be based on the angle the monster hit\n    let knockbackPhysics = new Dna.Components.Physics({\n      angle: new Dna.Utilities.Radians(angle),\n      speed: 2,\n      maxDistance: 20,\n      callback: () => {\n        this.gameObject.removeComponent(knockbackPhysics);\n      }\n    });\n    this.gameObject.addComponent(knockbackPhysics);\n\n    this.invulnerable = 0.5;\n  }\n\n  //TODO update this to use regular physics class\n  update(deltaTime) {\n    if (this.dead) return;\n\n    this.coordinates.x = 0;\n    this.coordinates.y = 0;\n    if (this.keyboard.left)\n      this.coordinates.add(Dna.Utilities.Vector.UNIT_LEFT);\n    if (this.keyboard.right)\n      this.coordinates.add(Dna.Utilities.Vector.UNIT_RIGHT);\n    if (this.keyboard.up) this.coordinates.add(Dna.Utilities.Vector.UNIT_UP);\n    if (this.keyboard.down)\n      this.coordinates.add(Dna.Utilities.Vector.UNIT_DOWN);\n\n    //TODO control this from gun class, but also disable when dead\n    if (this.mouse.leftClick) this.gun.gun.shoot();\n\n    if (this.coordinates.magnitude > 0) this.coordinates.magnitude = SPEED;\n    this.physics.xv = this.coordinates.x;\n    this.physics.yv = this.coordinates.y;\n\n    this.cooldown -= deltaTime;\n    this.emptyCooldown -= deltaTime;\n    this.invulnerable -= deltaTime;\n  }\n\n  render() {\n    //TODO flash if invulnerable\n    super.render();\n  }\n}\n\nexport { Hero };\n","class UnitAngle extends Dna.Component {\n  constructor(target) {\n    super();\n\n    this.target = target;\n\n    this.angle = new Dna.Utilities.Radians(0);\n  }\n\n  update(deltaTime) {\n    this.angle.radians = this.gameObject.transform.getAngleToTransform(\n      this.target.transform\n    );\n  }\n}\nexport { UnitAngle };\n","import { Hero } from \"./Hero\";\nimport { Gun } from \"./Gun\";\nimport { UnitAngle } from \"./UnitAngle\";\nimport { ImageAngle } from \"./ImageAngle\";\nimport { Pistol, Shotgun, Flamethrower } from \"./GunData\";\n//TODO need to impliment idle animation when hero is not moving\n//import heroIdleSheet from \"./assets/hero/idle.png\";\nimport heroUpSheet from \"./assets/hero/up.png\";\nimport heroUpSideSheet from \"./assets/hero/upside.png\";\nimport heroSideSheet from \"./assets/hero/side.png\";\nimport heroDownSideSheet from \"./assets/hero/downside.png\";\nimport heroDownSheet from \"./assets/hero/down.png\";\nlet heroUpImage = new Dna.Dom.Image(heroUpSheet);\nlet heroUpSideImage = new Dna.Dom.Image(heroUpSideSheet);\nlet heroSideImage = new Dna.Dom.Image(heroSideSheet);\nlet heroDownSideImage = new Dna.Dom.Image(heroDownSideSheet);\nlet heroDownImage = new Dna.Dom.Image(heroDownSheet);\n\nlet heroAssets = new Dna.Assets({\n  up: heroUpImage,\n  upSide: heroUpSideImage,\n  side: heroSideImage,\n  downSide: heroDownSideImage,\n  down: heroDownImage\n});\n\nconst RADIUS = 10;\nlet hero_default = {\n  width: 20,\n  height: 24,\n  loop: true,\n  numberOfFrames: 4,\n  ticksPerFrame: 5\n  //framesPerRow: 4\n};\n\nlet heroUp = {\n  image: heroUpImage\n};\nlet heroUpSide = {\n  image: heroUpSideImage\n};\nlet heroSide = {\n  image: heroSideImage\n};\nlet heroDownSide = {\n  image: heroDownSideImage\n};\nlet heroDown = {\n  image: heroDownImage\n};\n\nconst spriteOptions = [\n  heroUp,\n  heroUpSide,\n  heroSide,\n  heroDownSide,\n  heroDown,\n  heroDownSide,\n  heroSide,\n  heroUpSide\n];\n\nclass HeroPrefab extends Dna.GameObject {\n  constructor(\n    canvas,\n    announcer,\n    hpBar,\n    gunText,\n    ammoText,\n    mouse,\n    crosshair,\n    hurtboxes,\n    heroHitbox\n  ) {\n    super(canvas, {}, []);\n\n    let image = new Dna.Components.Image(hero_default);\n    image.updateOptions(heroDown);\n    let heroImage = new Dna.GameObject(this, {}, [image]);\n\n    let reloadingText = new Dna.GameObject(this, { y: -20 }, [\n      new Dna.Components.Text({ text: \"RELOADING\" })\n    ]);\n    reloadingText.setActive(false);\n\n    this.addComponent(\n      new Dna.Components.Hitcircle({\n        radius: RADIUS,\n        hitboxSet: heroHitbox\n      })\n    );\n\n    let unitAngle = new UnitAngle(crosshair);\n    this.addComponent(unitAngle);\n\n    this.addComponent(new ImageAngle(image, unitAngle.angle, spriteOptions, 1));\n\n    let gun = new Gun(\n      this,\n      {},\n      unitAngle.angle,\n      hurtboxes,\n      gunText,\n      ammoText,\n      reloadingText\n    );\n\n    let physics = new Dna.Components.SimplePhysics();\n    this.addComponent(physics);\n\n    let audio = new Dna.Components.Audio({ volume: 0.1 });\n    this.addComponent(audio);\n\n    this.unit = new Hero(\n      heroImage,\n      announcer,\n      hpBar,\n      mouse,\n      unitAngle.angle,\n      physics,\n      gun,\n      audio\n    );\n    this.addComponent(this.unit);\n  }\n}\n\nexport { HeroPrefab, heroAssets };\n","//TODO should not use hitboxes for this, doens't account for condition where unit moves past boundary in single frame\nclass Boundary extends Dna.GameObject {\n  constructor(parent, alignment, offset, width, height, hurtboxes) {\n    super(parent, alignment.getPosition(offset), [\n      new Dna.Components.Rectangle({ width: width, height: height })\n    ]);\n\n    //TODO reverse this logic, use callback on hero to handle collision detection\n    this.addComponent(\n      new Dna.Components.Hitbox({\n        width: width,\n        height: height,\n        hurtboxes: hurtboxes,\n        onCollision: alignment.onCollision\n      })\n    );\n  }\n}\n\nlet Alignments = {\n  TOP: {\n    getPosition: offset => {\n      return { y: offset };\n    },\n    onCollision: function(hurtbox) {\n      //TODO set absolute\n      let offset = hurtbox.radius || hurtbox.height / 2;\n      hurtbox.gameObject.transform.y =\n        this.gameObject.transform.y + this.height / 2 + offset;\n    }\n  },\n  BOTTOM: {\n    getPosition: offset => {\n      return { y: offset };\n    },\n    onCollision: function(hurtbox) {\n      //TODO set absolute\n      let offset = hurtbox.radius || hurtbox.height / 2;\n      hurtbox.gameObject.transform.y =\n        this.gameObject.transform.y - this.height / 2 - offset;\n    }\n  },\n  LEFT: {\n    getPosition: offset => {\n      return { x: offset };\n    },\n    onCollision: function(hurtbox) {\n      //TODO set absolute\n      let offset = hurtbox.radius || hurtbox.width / 2;\n      hurtbox.gameObject.transform.x =\n        this.gameObject.transform.x + this.width / 2 + offset;\n    }\n  },\n  RIGHT: {\n    getPosition: offset => {\n      return { x: offset };\n    },\n    onCollision: function(hurtbox) {\n      //TODO set absolute\n      let offset = hurtbox.radius || hurtbox.width / 2;\n      hurtbox.gameObject.transform.x =\n        this.gameObject.transform.x - this.width / 2 - offset;\n    }\n  }\n};\n\nexport { Boundary, Alignments };\n","class Movement extends Dna.Component {\n  constructor(physics, angle) {\n    super();\n\n    this.physics = physics;\n    this.angle = angle;\n  }\n\n  update(deltaTime) {\n    this.physics.angle.radians = this.angle.radians;\n  }\n}\n\n//TODO need to test this\nclass Ai extends Dna.Component {\n  constructor(hero, range, cooldown, attack) {\n    super();\n\n    this.range = range;\n    this.cooldown = 0;\n  }\n\n  canAttack() {\n    if (this.cooldown > 0 || this.range <= 0) return false;\n\n    return (\n      this.gameObject.transform.getDistanceToTransform(this.hero.transform) <=\n      this.range\n    );\n  }\n\n  attack() {\n    //TODO\n    // call callback\n    // set cooldown\n  }\n}\n\nclass Monster extends Dna.Component {\n  constructor(hp, hpSlider, spawner) {\n    super();\n\n    this.maxHp = hp;\n    this.hp = hp;\n\n    this.hpSlider = hpSlider;\n\n    this.spawner = spawner;\n\n    this.setHpText();\n  }\n\n  setHpText() {\n    //this.hpText.text = this.hp + \"/\" + this.maxHp;\n    this.hpSlider.value = this.hp;\n    this.hpSlider.maxValue = this.maxHp;\n  }\n\n  takeDamage(damage) {\n    this.hp = Math.max(0, this.hp - damage);\n    this.setHpText();\n\n    if (this.hp <= 0) {\n      this.die();\n    }\n  }\n\n  die() {\n    this.spawner.remove(this.gameObject);\n    this.gameObject.destroy();\n  }\n\n  knockback(direction) {\n    let knockbackPhysics = new Dna.Components.Physics({\n      angle: direction,\n      speed: 2,\n      maxDistance: 20,\n      callback: () => {\n        this.gameObject.removeComponent(knockbackPhysics);\n      }\n    });\n    this.gameObject.addComponent(knockbackPhysics);\n  }\n}\n\nexport { Movement, Ai, Monster };\n","//import { EnemyComponent } from \"./Enemy\";\nimport { Movement, Monster } from \"./Monster\";\nimport { UnitAngle } from \"./UnitAngle\";\nimport { ImageAngle } from \"./ImageAngle\";\nimport slimeUpSheet from \"./assets/slime/slime1_back.png\";\nimport slimeDownSheet from \"./assets/slime/slime1_front.png\";\nimport slimeLeftSheet from \"./assets/slime/slime1_side.png\";\nlet slimeUpImage = new Dna.Dom.Image(slimeUpSheet);\nlet slimeSideImage = new Dna.Dom.Image(slimeLeftSheet);\nlet slimeDownImage = new Dna.Dom.Image(slimeDownSheet);\n\nlet slimeAssets = new Dna.Assets({\n  up: slimeUpImage,\n  side: slimeSideImage,\n  down: slimeDownImage\n});\n\nconst RADIUS = 8;\nconst BASE_HP = 100;\nconst BASE_SPEED = 1;\nconst BASE_DAMAGE = 10;\nconst LEVEL_SCALING = 1.1;\n\n//TODO consolidate shared state to 1 object, allow image to read from its own values\nlet slime_default = {\n  width: 16,\n  height: 16,\n  loop: true,\n  numberOfFrames: 4,\n  ticksPerFrame: 5\n  //framesPerRow: 4\n};\nlet slimeUp = {\n  image: slimeUpImage\n};\nlet slimeSide = {\n  image: slimeSideImage\n};\nlet slimeDown = {\n  image: slimeDownImage\n};\n\nconst spriteOptions = [slimeUp, slimeSide, slimeDown, slimeSide];\n\nclass Slime extends Dna.GameObject {\n  constructor(canvas, position, hero, heroHurtbox, enemyHurtboxes, spawner) {\n    super(canvas, position, []);\n\n    let image = new Dna.Components.Image(slime_default);\n    image.updateOptions(slimeDown);\n    new Dna.GameObject(this, {}, [image]);\n    //this.addComponent(image);\n\n    //let hpText = new Dna.Components.Text({});\n    let hpSlider = new Dna.Components.Slider({\n      width: 25,\n      height: 5,\n      emptyColor: \"gray\"\n    });\n    new Dna.GameObject(this, { y: -15 }, [hpSlider]);\n\n    let hurtbox = new Dna.Components.Hitcircle({\n      radius: RADIUS,\n      hitboxSet: enemyHurtboxes\n    });\n    this.addComponent(hurtbox);\n\n    let unitAngle = new UnitAngle(hero);\n    this.addComponent(unitAngle);\n\n    this.addComponent(\n      new ImageAngle(image, unitAngle.angle, spriteOptions, -1)\n    );\n\n    let speed = BASE_SPEED * Math.pow(LEVEL_SCALING, spawner.level);\n    let physics = new Dna.Components.Physics({ speed: speed });\n    this.addComponent(physics);\n\n    this.addComponent(new Movement(physics, unitAngle.angle));\n\n    let maxHp = BASE_HP * Math.pow(LEVEL_SCALING, spawner.level);\n    this.unit = new Monster(maxHp, hpSlider, spawner);\n    this.addComponent(this.unit);\n\n    //TODO this logic should be reveresed, onhit should happen on hero, these stored in monsterHitboxes\n    //TODO add via component array\n    let damage = BASE_DAMAGE * Math.pow(LEVEL_SCALING, spawner.level);\n    this.addComponent(\n      new Dna.Components.Hitcircle({\n        radius: RADIUS,\n        hurtboxes: heroHurtbox,\n        onCollisionEnter: heroHurtbox => {\n          hero.unit.takeDamage(damage, this);\n        }\n      })\n    );\n\n    this.audio = new Dna.Components.Audio({ volume: 0.1 });\n    this.addComponent(this.audio);\n  }\n}\n\nconst spawnPositions = [\n  { x: 200, y: 150 },\n  { x: 200, y: -150 },\n  { x: -200, y: 150 },\n  { x: -200, y: -150 }\n];\n\nclass SlimeSpawner {\n  constructor(canvas, announcer, hero, heroHurtbox, enemyHurtboxes) {\n    this.canvas = canvas;\n    this.announcer = announcer;\n    this.hero = hero;\n    this.heroHurtbox = heroHurtbox;\n    this.enemyHurtboxes = enemyHurtboxes;\n\n    this.level = 0;\n    this.monsters = [];\n  }\n\n  remove(slime) {\n    let index = this.monsters.indexOf(slime);\n    this.monsters.splice(index, 1);\n\n    if (this.monsters.length <= 0) {\n      this.level++;\n      this.delayedSpawn();\n    }\n  }\n\n  delayedSpawn() {\n    setTimeout(() => {\n      this.spawn();\n    }, 2000);\n\n    this.announcer.text = \"LEVEL \" + (this.level + 1);\n    this.announcer.gameObject.setActive(true);\n    setTimeout(() => {\n      this.announcer.gameObject.setActive(false);\n    }, 2000);\n  }\n\n  spawn() {\n    for (let position of spawnPositions) {\n      this.monsters.push(\n        new Slime(\n          this.canvas,\n          position,\n          this.hero,\n          this.heroHurtbox,\n          this.enemyHurtboxes,\n          this\n        )\n      );\n    }\n  }\n}\n\nexport { Slime, SlimeSpawner, slimeAssets };\n","import crosshair from \"./assets/crosshair.png\";\n\nclass CrosshairComponent extends Dna.Component {\n  constructor(mouse) {\n    super();\n\n    this.mouse = mouse;\n  }\n\n  update(deltaTime) {\n    this.gameObject.transform.x = this.mouse.x;\n    this.gameObject.transform.y = this.mouse.y;\n  }\n}\n\nlet crosshairImage = new Image();\ncrosshairImage.src = crosshair;\n\nclass Crosshair extends Dna.GameObject {\n  constructor(parent, mouse) {\n    super(parent, {}, [\n      new CrosshairComponent(mouse),\n      new Dna.Components.Image({ width: 21, height: 21, image: crosshairImage })\n    ]);\n  }\n}\n\nexport { Crosshair };\n","import { HeroPrefab, heroAssets } from \"./HeroPrefab\";\nimport { Boundary, Alignments } from \"./Boundary\";\nimport { Slime, SlimeSpawner, slimeAssets } from \"./Slime\";\nimport { Crosshair } from \"./Crosshair\";\nimport { gunAssets } from \"./GunData\";\n\nimport tileSet from \"./assets/tileset.png\";\n\nimport wSprite from \"./assets/controls/w.png\";\nimport aSprite from \"./assets/controls/a.png\";\nimport sSprite from \"./assets/controls/s.png\";\nimport dSprite from \"./assets/controls/d.png\";\nimport tabSprite from \"./assets/controls/tab.png\";\nimport rSprite from \"./assets/controls/r.png\";\nimport mouseSprite from \"./assets/controls/mouse.png\";\nimport leftClickSprite from \"./assets/controls/leftclick.png\";\n\nlet floorImage = new Dna.Dom.Image(tileSet);\nlet background = new Dna.StaticCanvas(\n  document.getElementById(\"background\"),\n  [floorImage.load],\n  background => {\n    new Dna.GameObject(background, {}, [\n      new Dna.Components.Image({\n        image: floorImage,\n        type: Dna.Components.Image.types.randomTiled,\n        width: 40,\n        height: 8,\n        destWidth: 700,\n        destHeight: 500,\n        xWeight: [0.8, 0.05, 0.05, 0.05, 0.05],\n        yWeight: [1]\n      })\n    ]);\n  }\n);\n\n//TODO find an elegant way to preload these\nlet wImage = new Dna.Dom.Image(wSprite);\nlet aImage = new Dna.Dom.Image(aSprite);\nlet sImage = new Dna.Dom.Image(sSprite);\nlet dImage = new Dna.Dom.Image(dSprite);\nlet tabImage = new Dna.Dom.Image(tabSprite);\nlet rImage = new Dna.Dom.Image(rSprite);\nlet mouseImage = new Dna.Dom.Image(mouseSprite);\nlet leftClickImage = new Dna.Dom.Image(leftClickSprite);\nlet foreground = new Dna.StaticCanvas(\n  document.getElementById(\"foreground\"),\n  [\n    wImage.load,\n    aImage.load,\n    sImage.load,\n    dImage.load,\n    tabImage.load,\n    rImage.load,\n    mouseImage.load,\n    leftClickImage.load\n  ],\n  foreground => {\n    console.log(wImage);\n\n    function getImageOptions(image) {\n      return {\n        image: image,\n        width: 100,\n        height: 100,\n        destWidth: 30,\n        destHeight: 30,\n        type: Dna.Components.Image.types.stretched\n      };\n    }\n\n    let controls = new Dna.GameObject(foreground, { x: -250, y: 160 });\n\n    let moveControls = new Dna.GameObject(controls, { x: -40, y: 30 }, []);\n    new Dna.GameObject(moveControls, { y: -25 }, [\n      new Dna.Components.Text({ text: \"Move\" })\n    ]);\n    new Dna.GameObject(moveControls, { y: -5 }, [\n      new Dna.Components.Image(getImageOptions(wImage))\n    ]);\n    new Dna.GameObject(moveControls, { y: 20, x: -25 }, [\n      new Dna.Components.Image(getImageOptions(aImage))\n    ]);\n    new Dna.GameObject(moveControls, { y: 20 }, [\n      new Dna.Components.Image(getImageOptions(sImage))\n    ]);\n    new Dna.GameObject(moveControls, { y: 20, x: 25 }, [\n      new Dna.Components.Image(getImageOptions(dImage))\n    ]);\n\n    let shootControls = new Dna.GameObject(controls, { x: -40, y: -30 });\n    new Dna.GameObject(shootControls, { x: -25, y: -10 }, [\n      new Dna.Components.Text({ text: \"Aim\" })\n    ]);\n    new Dna.GameObject(shootControls, { x: -25, y: 10 }, [\n      new Dna.Components.Image(getImageOptions(mouseImage))\n    ]);\n    new Dna.GameObject(shootControls, { x: 25, y: -10 }, [\n      new Dna.Components.Text({ text: \"Shoot\" })\n    ]);\n    new Dna.GameObject(shootControls, { x: 25, y: 10 }, [\n      new Dna.Components.Image(getImageOptions(leftClickImage))\n    ]);\n\n    let gunControls = new Dna.GameObject(controls, { x: 40 });\n    new Dna.GameObject(gunControls, { y: -35 }, [\n      new Dna.Components.Text({ text: \"Reload\" })\n    ]);\n    new Dna.GameObject(gunControls, { y: -15 }, [\n      new Dna.Components.Image(getImageOptions(rImage))\n    ]);\n    new Dna.GameObject(gunControls, { y: 15 }, [\n      new Dna.Components.Text({ text: \"Weapon\" })\n    ]);\n    new Dna.GameObject(gunControls, { y: 35 }, [\n      new Dna.Components.Image(getImageOptions(tabImage))\n    ]);\n    //TODO fix this, dont depend on calling this\n    //foreground.renderAll();\n  }\n);\n\nlet canvas = new Dna.Canvas(document.getElementById(\"canvas\"));\n\nfunction start() {\n  let mouse = new Dna.Input.Mouse(canvas);\n  let crosshair = new Crosshair(canvas, mouse);\n\n  let announcer = new Dna.Components.Text({\n    text: \"testing\",\n    font: \"48px serif\"\n  });\n  new Dna.GameObject(canvas, { y: -100 }, [announcer]);\n\n  let hpBar = new Dna.Components.Slider({\n    width: 125,\n    height: 20,\n    emptyColor: \"gray\"\n  });\n  new Dna.GameObject(canvas, { x: -250, y: -200 }, [hpBar]);\n  new Dna.GameObject(canvas, { x: -300, y: -220 }, [\n    new Dna.Components.Text({ text: \"HP:\", font: \"18px serif\" })\n  ]);\n\n  let ammoTextContainer = new Dna.GameObject(canvas, { x: 290, y: 205 });\n  let gunText = new Dna.Components.Text({ font: \"15px serif\" });\n  let ammoText = new Dna.Components.Text({ font: \"15px serif\" });\n  new Dna.GameObject(ammoTextContainer, { y: -10 }, [gunText]);\n  new Dna.GameObject(ammoTextContainer, { y: 10 }, [ammoText]);\n\n  let heroHurtbox = [];\n  let enemyHurtboxes = [];\n\n  let hero = new HeroPrefab(\n    canvas,\n    announcer,\n    hpBar,\n    gunText,\n    ammoText,\n    mouse,\n    crosshair,\n    enemyHurtboxes,\n    heroHurtbox\n  );\n\n  let slimeSpawner = new SlimeSpawner(\n    canvas,\n    announcer,\n    hero,\n    heroHurtbox,\n    enemyHurtboxes\n  );\n  slimeSpawner.delayedSpawn();\n\n  const X_OFFSET = 350;\n  const Y_OFFSET = 250;\n  const X_LONG = 500;\n  const Y_LONG = 700;\n  const SHORT = 20;\n  let topBoundary = new Boundary(\n    canvas,\n    Alignments.TOP,\n    -Y_OFFSET,\n    Y_LONG,\n    SHORT,\n    heroHurtbox\n  );\n  let bottomBoundary = new Boundary(\n    canvas,\n    Alignments.BOTTOM,\n    Y_OFFSET,\n    Y_LONG,\n    SHORT,\n    heroHurtbox\n  );\n  let leftBoundary = new Boundary(\n    canvas,\n    Alignments.LEFT,\n    -X_OFFSET,\n    SHORT,\n    X_LONG,\n    heroHurtbox\n  );\n  let rightBoundary = new Boundary(\n    canvas,\n    Alignments.RIGHT,\n    X_OFFSET,\n    SHORT,\n    X_LONG,\n    heroHurtbox\n  );\n}\n\n//TODO load hero and slime images this way\nlet scene = new Dna.Scene(\n  [canvas],\n  new Dna.Assets({\n    hero: heroAssets,\n    slime: slimeAssets,\n    guns: gunAssets\n  }),\n  start\n);\nscene.load();\n"]}