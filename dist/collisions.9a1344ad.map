{"version":3,"sources":["demos/collisions/Unit.js","demos/collisions/Boundary.js","demos/collisions/collisions.js"],"names":["SPEED","Unit","keyboard","physics","deltaTime","xv","yv","left","right","up","down","Dna","Component","Boundary","parent","alignment","offset","width","height","hurtboxes","getPosition","Components","Rectangle","hitbox","Hitbox","onCollision","addComponent","GameObject","Alignments","TOP","y","hurtbox","radius","gameObject","transform","console","log","BOTTOM","LEFT","x","RIGHT","RADIUS","canvas","Canvas","document","getElementById","gravity","SimplePhysics","xy","circleInput","circleKeyboard","Input","Keyboard","rectInput","rectKeyboard","circle","Polygon","vert","circlePhysics","circleHeroComponent","circleHurtcircle","Hitcircle","rect","rectPhysics","rectHeroComponent","rectHurtbox","circleHitcircle","xOffset","leftLimit","rightLimit","prevX","yOffset","topLimit","bottomLimit","prevY","rectHitbox","SHORT","LONG","OFFSET","topBoundary","bottomBoundary","leftBoundary","rightBoundary"],"mappings":"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","file":"collisions.9a1344ad.map","sourceRoot":"..","sourcesContent":["const SPEED = 5;\n\nclass Unit extends Dna.Component {\n  constructor(keyboard, physics) {\n    super();\n\n    this.keyboard = keyboard;\n    this.physics = physics;\n  }\n\n  update(deltaTime) {\n    let xv = 0;\n    let yv = 0;\n    if (this.keyboard.left) xv -= SPEED;\n    if (this.keyboard.right) xv += SPEED;\n    if (this.keyboard.up) yv -= SPEED;\n    if (this.keyboard.down) yv += SPEED;\n\n    this.physics.xv = xv;\n    this.physics.yv = yv;\n  }\n}\n\n/*\nclass Hero extends Dna.GameObject {\n  constructor(parent, position, input) {\n    super(parent, position, [\n      new Dna.Components.Rectangle({ width: SIZE, height: SIZE })\n    ]);\n\n    this.physics = new Dna.Components.SimplePhysics();\n    this.addComponent(this.physics);\n\n    this.hurtbox = new Dna.Components.Hitbox({\n      width: SIZE,\n      height: SIZE\n    });\n    this.addComponent(this.hurtbox);\n\n    this.addComponent(new HeroComponent(input, this.physics));\n  }\n\n  ground() {\n    this.grounded = true;\n\n    this.gravity.active = false;\n    this.physics.xy = 0;\n\n    console.log(\"on ground\");\n  }\n}\n*/\n\nexport { Unit };\n","//TODO should not use hitboxes for this, doens't account for condition where unit moves past boundary in single frame\nclass Boundary extends Dna.GameObject {\n  constructor(parent, alignment, offset, width, height, hurtboxes) {\n    //}, callback) {\n    super(parent, alignment.getPosition(offset), [\n      new Dna.Components.Rectangle({ width: width, height: height })\n    ]);\n\n    let hitbox = new Dna.Components.Hitbox(\n      {\n        width: width,\n        height: height,\n        hurtboxes: hurtboxes,\n        onCollision: alignment.onCollision\n      }\n      /*\n      width,\n      height,\n      hurtboxes,\n      alignment.callback\n      */\n      /*\n      hurtbox => {\n        //TODO set absolute\n        hurtbox.gameObject.transform.x =\n          this.transform.getAbsoluteCenter().x - WIDTH / 2 - hurtbox.radius;\n        console.log(\"collision detected\");\n      }\n      */\n    );\n    this.addComponent(hitbox);\n  }\n}\n\n//TODO this offset logic is jank\nlet Alignments = {\n  TOP: {\n    getPosition: offset => {\n      return { y: offset };\n    },\n    onCollision: function(hurtbox) {\n      //TODO set absolute\n      let offset = hurtbox.radius || hurtbox.height / 2;\n      hurtbox.gameObject.transform.y =\n        this.gameObject.transform.y + this.height / 2 + offset;\n      console.log(\"collision detected\");\n    }\n  },\n  BOTTOM: {\n    getPosition: offset => {\n      return { y: offset };\n    },\n    onCollision: function(hurtbox) {\n      //TODO set absolute\n      let offset = hurtbox.radius || hurtbox.height / 2;\n      hurtbox.gameObject.transform.y =\n        this.gameObject.transform.y - this.height / 2 - offset;\n      console.log(\"collision detected\");\n      //hurtbox.gameObject.ground();\n    }\n  },\n  LEFT: {\n    getPosition: offset => {\n      return { x: offset };\n    },\n    onCollision: function(hurtbox) {\n      //TODO set absolute\n      let offset = hurtbox.radius || hurtbox.width / 2;\n      hurtbox.gameObject.transform.x =\n        this.gameObject.transform.x + this.width / 2 + offset;\n      console.log(\"collision detected\");\n    }\n  },\n  RIGHT: {\n    getPosition: offset => {\n      return { x: offset };\n    },\n    onCollision: function(hurtbox) {\n      //TODO set absolute\n      let offset = hurtbox.radius || hurtbox.width / 2;\n      hurtbox.gameObject.transform.x =\n        this.gameObject.transform.x - this.width / 2 - offset;\n      console.log(\"collision detected\");\n    }\n  }\n};\n\nexport { Boundary, Alignments };\n","import { Unit } from \"./Unit\";\nimport { Boundary, Alignments } from \"./Boundary\";\n\nconst RADIUS = 20;\n\nlet canvas = new Dna.Canvas(document.getElementById(\"canvas\"));\n\nlet gravity = new Dna.Components.SimplePhysics({ xy: 5 });\n\n//TODO handle mouse input\nlet circleInput = {\n  87: \"up\",\n  83: \"down\",\n  65: \"left\",\n  68: \"right\"\n  //up: 87,\n  //down: 83,\n  //left: 65,\n  //right: 68\n  //jump: 32\n  //secondary: 17\n};\nlet circleKeyboard = new Dna.Input.Keyboard(circleInput);\n\nlet rectInput = {\n  38: \"up\",\n  40: \"down\",\n  37: \"left\",\n  39: \"right\"\n  //up: 38,\n  //down: 40,\n  //left: 37,\n  //right: 39\n};\nlet rectKeyboard = new Dna.Input.Keyboard(rectInput);\n\n//let hero = new Hero(canvas, {}, circleKeyboard);\n\nlet circle = new Dna.GameObject(canvas, { x: -30 }, [\n  new Dna.Components.Polygon({ vert: 0, radius: RADIUS })\n]);\nlet circlePhysics = new Dna.Components.SimplePhysics();\nlet circleHeroComponent = new Unit(circleKeyboard, circlePhysics);\nlet circleHurtcircle = new Dna.Components.Hitcircle({ radius: RADIUS });\ncircle.addComponent(circlePhysics);\ncircle.addComponent(circleHeroComponent);\ncircle.addComponent(circleHurtcircle);\n\nlet rect = new Dna.GameObject(canvas, { x: 30 }, [\n  new Dna.Components.Rectangle({ width: RADIUS * 2, height: RADIUS * 2 })\n]);\nlet rectPhysics = new Dna.Components.SimplePhysics();\nlet rectHeroComponent = new Unit(rectKeyboard, rectPhysics);\nlet rectHurtbox = new Dna.Components.Hitbox({\n  width: RADIUS * 2,\n  height: RADIUS * 2\n});\nrect.addComponent(rectPhysics);\nrect.addComponent(rectHeroComponent);\nrect.addComponent(rectHurtbox);\n\nlet circleHitcircle = new Dna.Components.Hitcircle({\n  radius: RADIUS,\n  hurtboxes: [rectHurtbox],\n  onCollision: function(hurtbox) {\n    //TODO these should be using absolute positions\n    let xOffset = this.radius + hurtbox.width / 2;\n    let leftLimit = hurtbox.gameObject.transform.x - xOffset;\n    let rightLimit = hurtbox.gameObject.transform.x + xOffset;\n    if (\n      this.gameObject.transform.prevX <= leftLimit &&\n      this.gameObject.transform.x > leftLimit\n    ) {\n      this.gameObject.transform.x = leftLimit;\n    }\n    if (\n      this.gameObject.transform.prevX >= rightLimit &&\n      this.gameObject.transform.x < rightLimit\n    ) {\n      this.gameObject.transform.x = rightLimit;\n    }\n\n    let yOffset = this.radius + hurtbox.height / 2;\n    let topLimit = hurtbox.gameObject.transform.y - yOffset;\n    let bottomLimit = hurtbox.gameObject.transform.y + yOffset;\n    if (\n      this.gameObject.transform.prevY <= topLimit &&\n      this.gameObject.transform.y > topLimit\n    ) {\n      this.gameObject.transform.y = topLimit;\n    }\n    if (\n      this.gameObject.transform.prevY >= bottomLimit &&\n      this.gameObject.transform.y < bottomLimit\n    ) {\n      this.gameObject.transform.y = bottomLimit;\n    }\n  }\n});\n\nlet rectHitbox = new Dna.Components.Hitbox({\n  width: RADIUS * 2,\n  height: RADIUS * 2,\n  hurtboxes: [circleHurtcircle]\n});\nrect.addComponent(rectHitbox);\ncircle.addComponent(circleHitcircle);\n\n//TODO normalize callback by using alignment?? top, bottom, left, right\nconst SHORT = 10;\nconst LONG = 500;\nconst OFFSET = 100;\n\nlet hurtboxes = [circleHurtcircle, rectHurtbox];\n//let hurtboxes = [hero.hurtbox];\nlet topBoundary = new Boundary(\n  canvas,\n  Alignments.TOP,\n  -OFFSET,\n  LONG,\n  SHORT,\n  hurtboxes\n);\nlet bottomBoundary = new Boundary(\n  canvas,\n  Alignments.BOTTOM,\n  OFFSET,\n  LONG,\n  SHORT,\n  hurtboxes\n);\n\nlet leftBoundary = new Boundary(\n  canvas,\n  Alignments.LEFT,\n  -OFFSET,\n  SHORT,\n  LONG,\n  hurtboxes\n);\nlet rightBoundary = new Boundary(\n  canvas,\n  Alignments.RIGHT,\n  OFFSET,\n  SHORT,\n  LONG,\n  hurtboxes\n);\n"]}