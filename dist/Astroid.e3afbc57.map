{"version":3,"sources":["astroids/Astroid.js"],"names":["ASTROID_SPEED","ASTROID_VERT","ASTROID_JAG","ASTROID_POINTS_LARGE","ASTROID_POINTS_MEDIUM","ASTROID_POINTS_SMALL","ASTROID_LARGE","ASTROID_MEDIUM","ASTROID_SMALL","AstroidPrefab","parent","position","level","r","levelMultiplier","Dna","Components","Polygon","vert","Math","floor","random","jaggedness","Physics","xv","yv","canvas","getCanvas","transform","x","width","y","height","astroids","points","options","push","Astroid","ASTROIDS_MEDIUM","index","indexOf","splice","GameObject"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA,IAAMA,aAAa,GAAG,EAAtB,EAA0B;;AAC1B,IAAMC,YAAY,GAAG,EAArB,EAAyB;;AACzB,IAAMC,WAAW,GAAG,GAApB,EAAyB;;AACzB,IAAMC,oBAAoB,GAAG,EAA7B;AACA,IAAMC,qBAAqB,GAAG,EAA9B;AACA,IAAMC,oBAAoB,GAAG,GAA7B;AAEA,IAAMC,aAAa,GAAG,EAAtB;AACA,IAAMC,cAAc,GAAG,EAAvB;AACA,IAAMC,aAAa,GAAG,EAAtB;;IAEMC;;;;;AACJ,yBAAYC,MAAZ,EAAoBC,QAApB,EAA8BC,KAA9B,EAAwD;AAAA;;AAAA,QAAnBC,CAAmB,uEAAfP,aAAe;;AAAA;;AACtD,QAAIQ,eAAe,GAAG,IAAI,MAAMF,KAAhC;AACA,uFAAMF,MAAN,EAAcC,QAAd,EAAwB,CACtB,IAAII,GAAG,CAACC,UAAJ,CAAeC,OAAnB,CAA2B;AAAEJ,MAAAA,CAAC,EAAEA;AAAL,KAA3B,CADsB,EACgB;AACtC,QAAIE,GAAG,CAACC,UAAJ,CAAeC,OAAnB,CAA2B;AACzBJ,MAAAA,CAAC,EAAEA,CADsB;AAEzBK,MAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBpB,YAAY,GAAG,CAAhC,IAAqCA,YAAY,GAAG,CAA/D,CAFmB;AAGzBqB,MAAAA,UAAU,EAAEpB;AAHa,KAA3B,CAFsB,EAOtB,IAAIa,GAAG,CAACC,UAAJ,CAAeO,OAAnB,CAA2B;AACzBC,MAAAA,EAAE,EACAL,IAAI,CAACE,MAAL,KACArB,aADA,GAEAc,eAFA,IAGCK,IAAI,CAACE,MAAL,KAAgB,GAAhB,GAAsB,CAAtB,GAA0B,CAAC,CAH5B,CAFuB;AAMzBI,MAAAA,EAAE,EACAN,IAAI,CAACE,MAAL,KACArB,aADA,GAEAc,eAFA,IAGCK,IAAI,CAACE,MAAL,KAAgB,GAAhB,GAAsB,CAAtB,GAA0B,CAAC,CAH5B;AAPuB,KAA3B,CAPsB,CAAxB;AAoBA,UAAKR,CAAL,GAASA,CAAT;AAtBsD;AAuBvD;;;;6BACQ;AACP;;;;;;;;;;;;;;AAeA;AAEA;AACA;AAEA,UAAIa,MAAM,GAAG,KAAKC,SAAL,EAAb;;AAEA,UAAI,KAAKC,SAAL,CAAeC,CAAf,GAAmB,CAACH,MAAM,CAACI,KAAR,GAAgB,CAAhB,GAAoB,KAAKjB,CAAhD,EAAmD;AACjD;AACA,aAAKe,SAAL,CAAeC,CAAf,GAAmBH,MAAM,CAACI,KAAP,GAAe,CAAf,GAAmB,KAAKjB,CAA3C;AACD,OAHD,MAGO,IAAI,KAAKe,SAAL,CAAeC,CAAf,GAAmBH,MAAM,CAACI,KAAP,GAAe,CAAf,GAAmB,KAAKjB,CAA/C,EAAkD;AACvD;AACA,aAAKe,SAAL,CAAeC,CAAf,GAAmB,CAACH,MAAM,CAACI,KAAR,GAAgB,CAAnC;AACD;;AACD,UAAI,KAAKF,SAAL,CAAeG,CAAf,GAAmB,CAACL,MAAM,CAACM,MAAR,GAAiB,CAAjB,GAAqB,KAAKnB,CAAjD,EAAoD;AAClD,aAAKe,SAAL,CAAeG,CAAf,GAAmBL,MAAM,CAACM,MAAP,GAAgB,CAAhB,GAAoB,KAAKnB,CAA5C;AACD,OAFD,MAEO,IAAI,KAAKe,SAAL,CAAeG,CAAf,GAAmBL,MAAM,CAACM,MAAP,GAAgB,CAAhB,GAAoB,KAAKnB,CAAhD,EAAmD;AACxD,aAAKe,SAAL,CAAeG,CAAf,GAAmB,CAACL,MAAM,CAACM,MAAR,GAAiB,CAApC;AACD;AACF;;;mCAEcC,UAAU;AACvB,UAAIC,MAAM,GAAG,CAAb;;AACA,UAAI,KAAKC,OAAL,CAAatB,CAAb,IAAkBP,aAAtB,EAAqC;AACnC2B,QAAAA,QAAQ,CAACG,IAAT,CACE,IAAIC,OAAJ,CACE,KAAK3B,MADP,EAEE;AAAEmB,UAAAA,CAAC,EAAE,KAAKlB,QAAL,CAAckB,CAAnB;AAAsBE,UAAAA,CAAC,EAAE,KAAKpB,QAAL,CAAcoB;AAAvC,SAFF,EAGExB,cAHF,CADF;AAOA0B,QAAAA,QAAQ,CAACG,IAAT,CACE,IAAIC,OAAJ,CACE,KAAK3B,MADP,EAEE;AAAEmB,UAAAA,CAAC,EAAE,KAAKlB,QAAL,CAAckB,CAAnB;AAAsBE,UAAAA,CAAC,EAAE,KAAKpB,QAAL,CAAcoB;AAAvC,SAFF,EAGExB,cAHF,CADF;AAOA2B,QAAAA,MAAM,GAAG/B,oBAAT;AACD,OAhBD,MAgBO,IAAI,KAAKgC,OAAL,CAAatB,CAAb,IAAkByB,eAAtB,EAAuC;AAC5CL,QAAAA,QAAQ,CAACG,IAAT,CACE,IAAIC,OAAJ,CACE,KAAK3B,MADP,EAEE;AAAEmB,UAAAA,CAAC,EAAE,KAAKlB,QAAL,CAAckB,CAAnB;AAAsBE,UAAAA,CAAC,EAAE,KAAKpB,QAAL,CAAcoB;AAAvC,SAFF,EAGEvB,aAHF,CADF;AAOAyB,QAAAA,QAAQ,CAACG,IAAT,CACE,IAAIC,OAAJ,CACE,KAAK3B,MADP,EAEE;AAAEmB,UAAAA,CAAC,EAAE,KAAKlB,QAAL,CAAckB,CAAnB;AAAsBE,UAAAA,CAAC,EAAE,KAAKpB,QAAL,CAAcoB;AAAvC,SAFF,EAGEvB,aAHF,CADF;AAOA0B,QAAAA,MAAM,GAAG9B,qBAAT;AACD,OAhBM,MAgBA;AACL8B,QAAAA,MAAM,GAAG7B,oBAAT;AACD;;AAED,UAAIkC,KAAK,GAAGN,QAAQ,CAACO,OAAT,CAAiB,IAAjB,CAAZ;AACAP,MAAAA,QAAQ,CAACQ,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB;AAEA,aAAOL,MAAP;AACD;;;;EAxGyBnB,GAAG,CAAC2B","file":"Astroid.e3afbc57.map","sourceRoot":"..","sourcesContent":["//import { Polygon } from \"../src/Objects/Polygon\";\n//import { Circle } from \"../src/Objects/Circle\";\n//import { SimplePhysics } from \"../src/Components/SimplePhysics\";\n//import { Hitbox } from \"../src/Components/Hitbox\";\n\nconst ASTROID_SPEED = 50; // max starting speed\nconst ASTROID_VERT = 10; // average num of vertecies on each astroid\nconst ASTROID_JAG = 0.4; // jaggedness of astroids\nconst ASTROID_POINTS_LARGE = 20;\nconst ASTROID_POINTS_MEDIUM = 50;\nconst ASTROID_POINTS_SMALL = 100;\n\nconst ASTROID_LARGE = 50;\nconst ASTROID_MEDIUM = 25;\nconst ASTROID_SMALL = 12;\n\nclass AstroidPrefab extends Dna.GameObject {\n  constructor(parent, position, level, r = ASTROID_LARGE) {\n    let levelMultiplier = 1 + 0.1 * level;\n    super(parent, position, [\n      new Dna.Components.Polygon({ r: r }), //TODO remove this, just to test position\n      new Dna.Components.Polygon({\n        r: r,\n        vert: Math.floor(Math.random() * (ASTROID_VERT + 1) + ASTROID_VERT / 2),\n        jaggedness: ASTROID_JAG\n      }),\n      new Dna.Components.Physics({\n        xv:\n          Math.random() *\n          ASTROID_SPEED *\n          levelMultiplier *\n          (Math.random() < 0.5 ? 1 : -1),\n        yv:\n          Math.random() *\n          ASTROID_SPEED *\n          levelMultiplier *\n          (Math.random() < 0.5 ? 1 : -1)\n      })\n    ]);\n    this.r = r;\n  }\n  update() {\n    /*\n        let absoluteCenter = this.position.getAbsoluteCenter();\n        // handle edge of screen\n        if (absoluteCenter.x < 0 - this.options.r) {\n            absoluteCenter.x = this.canvas.width + this.options.r;\n        } else if (absoluteCenter.x > this.canvas.width + this.options.r) {\n            absoluteCenter.x = 0 - this.options.r;\n        }\n        if (absoluteCenter.y < 0 - this.options.r) {\n            absoluteCenter.y = this.canvas.height + this.options.r;\n        } else if (absoluteCenter.y > this.canvas.height + this.options.r) {\n            absoluteCenter.y = 0 - this.options.r;\n        }\n        */\n\n    //console.log(this.canvas.width + \" \" + this.canvas.height);\n\n    //let absoluteCenter = this.position.getAbsoluteCenter();\n    //console.log(absoluteCenter.x + \" \" + absoluteCenter.y);\n\n    let canvas = this.getCanvas();\n\n    if (this.transform.x < -canvas.width / 4 - this.r) {\n      //console.log(this.position.x + \" \" + this.position.y);\n      this.transform.x = canvas.width / 4 + this.r;\n    } else if (this.transform.x > canvas.width / 4 + this.r) {\n      //console.log(this.position.x + \" \" + this.position.y);\n      this.transform.x = -canvas.width / 4;\n    }\n    if (this.transform.y < -canvas.height / 4 - this.r) {\n      this.transform.y = canvas.height / 4 + this.r;\n    } else if (this.transform.y > canvas.height / 4 + this.r) {\n      this.transform.y = -canvas.height / 4;\n    }\n  }\n\n  destroyAstroid(astroids) {\n    let points = 0;\n    if (this.options.r == ASTROID_LARGE) {\n      astroids.push(\n        new Astroid(\n          this.parent,\n          { x: this.position.x, y: this.position.y },\n          ASTROID_MEDIUM\n        )\n      );\n      astroids.push(\n        new Astroid(\n          this.parent,\n          { x: this.position.x, y: this.position.y },\n          ASTROID_MEDIUM\n        )\n      );\n      points = ASTROID_POINTS_LARGE;\n    } else if (this.options.r == ASTROIDS_MEDIUM) {\n      astroids.push(\n        new Astroid(\n          this.parent,\n          { x: this.position.x, y: this.position.y },\n          ASTROID_SMALL\n        )\n      );\n      astroids.push(\n        new Astroid(\n          this.parent,\n          { x: this.position.x, y: this.position.y },\n          ASTROID_SMALL\n        )\n      );\n      points = ASTROID_POINTS_MEDIUM;\n    } else {\n      points = ASTROID_POINTS_SMALL;\n    }\n\n    let index = astroids.indexOf(this);\n    astroids.splice(index, 1);\n\n    return points;\n  }\n}\n\nexport { AstroidPrefab };\n"]}