{"version":3,"sources":["Utilities/Angle.js","Composite.js","Transform.js","Canvas.js","GameObject.js","Component.js","Scene.js","Components/Image.js","Components/SimplePhysics.js","Components/Polygon.js","Components/Rectangle.js","Components/Physics.js","Components/Acceleration.js","Components/Hitcircle.js","Components/Hitbox.js","Components/Text.js","Components/Audio.js","Components/Slider.js","Utilities/Position.js","Input/Input.js","Input/Keyboard.js","Input/Mouse.js","Dom/Image.js","Dna.js"],"names":["degreesToRadians","degrees","Math","PI","radiansToDegrees","radians","Angle","_degrees","_radians","angle","spread","random","Radians","UP","LEFT","DOWN","RIGHT","Degrees","updateContext","drawSettings","context","save","translate","x","y","rotate","rotation","scale","xScale","yScale","restoreContext","restore","Composite","gameObjects","gameObject","push","index","indexOf","splice","deltaTime","update","forEach","updateAll","dead","destroyNow","currDraw","transform","render","renderAll","Transform","defaults","depth","options","prevX","prevY","dx","dy","atan2","other","thisCenter","getAbsoluteCenter","otherCenter","sqrt","pow","pos","parent","getAbsoluteRotation","addDegrees","distance","sin","cos","center","rad","parentCenter","parentRotation","CanvasTransform","domCanvas","width","height","StaticCanvas","load","start","ctx","getContext","Promise","all","then","clearRect","canvas","clear","console","log","Canvas","currTime","prevTime","self","window","requestAnimationFrame","gameLoop","scene","GameObject","components","active","i","length","addComponent","setParent","component","onDestroy","removeGameObject","maintainAbsolutePosition","prevCenter","addGameObject","setAbsoluteCenter","getScene","getCanvas","Component","Scene","canvases","assets","addCanvas","Assets","key","asset","resolve","recalculateIndex","image","_framesPerRow","frameIndex","numberOfFrames","_xIndex","xIndexStart","_yIndex","yIndexStart","floor","getWeightedIndex","arr","prevTotal","types","default","tiled","stretched","randomTiled","Image","type","ticksPerFrame","loop","onFinish","xWeight","yWeight","tickCount","updateOptions","destWidth","destHeight","undefined","startingColumn","startingRow","drawImage","currTileX","endTileX","endTileY","currTileY","numTilesX","numTilesY","tileWidth","tileHeight","xRandom","yRandom","xTile","yTile","SimplePhysics","xv","yv","Polygon","vertOffset","opts","radius","vert","jaggedness","strokeStyle","fillStyle","beginPath","arc","moveTo","lineTo","closePath","stroke","fill","Rectangle","fillRect","Physics","speed","distanceTraveled","maxDistance","Infinity","callback","destroy","Acceleration","physics","accel","friction","Hitcircle","hurtboxes","hitboxSet","onCollision","onCollisionEnter","onCollisionExit","collidingWith","num","hurtbox","collidingWithIndex","prevColliding","collidingWithHitcircle","hitbox","hitboxCenter","hitcircle","hitcircleCenter","distanceBetween","Hitbox","collidingWithHitbox","DEFAULT","text","textAlign","textBaseline","font","Text","fillText","Audio","audio","volume","clip","src","currentTime","play","Slider","value","maxValue","fillColor","emptyColor","fillPercent","recalculateVector","position","_angle","_y","_x","_magnitude","_dirtyVector","recalculateCoordinates","_dirtyCoordinates","_prevRadians","Position","magnitude","UNIT_LEFT","UNIT_RIGHT","UNIT_UP","UNIT_DOWN","Coordinates","Vector","Input","handler","activeInputs","registeredInputs","Object","keys","command","registerCommand","document","addEventListener","event","keyCode","preventDefault","repeat","keycode","Array","isArray","Keyboard","onKeyDown","onKeyUp","Mouse","onLeftClick","onRightClick","rect","getBoundingClientRect","clientX","round","left","clientY","top","leftClick","body","DomImage","reject","onload","onerror","Dna","Components","Utilities","Dom"],"mappings":"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","file":"Dna.map","sourceRoot":"../src","sourcesContent":["//import { Coordinates } from \"./Position\";\n\nfunction degreesToRadians(degrees) {\n  return (degrees * Math.PI) / 180;\n}\n\nfunction radiansToDegrees(radians) {\n  return (radians * 180) / Math.PI;\n}\n\nclass Angle {\n  constructor(degrees, radians) {\n    this._degrees = degrees;\n    this._radians = radians;\n\n    //TODO dirty flags\n  }\n\n  get degrees() {\n    return this._degrees;\n  }\n  get radians() {\n    return this._radians;\n  }\n\n  set degrees(degrees) {\n    this._degrees = degrees;\n    this._radians = degreesToRadians(degrees);\n  }\n  set radians(radians) {\n    this._radians = radians;\n    this._degrees = radiansToDegrees(radians);\n  }\n\n  add(angle) {\n    this.radians += angle.radians;\n    return this;\n  }\n\n  addRadians(radians) {\n    this.radians += radians;\n    return this;\n  }\n\n  addDegrees(degrees) {\n    this.degrees += degrees;\n    return this;\n  }\n\n  getNewAngle(spread) {\n    let radians = this.radians;\n    radians -= spread.radians / 2;\n    radians += Math.random() * spread.radians;\n    return new Radians(radians);\n  }\n\n  /*\n  getUnitCoordinates(scale = 1) {\n    return new Coordinates(\n      Math.sin(this.radians) * scale,\n      -Math.cos(this.radians) * scale\n    );\n  }\n  */\n\n  static get UP() {\n    return UP;\n  }\n  static get LEFT() {\n    return LEFT;\n  }\n  static get DOWN() {\n    return DOWN;\n  }\n  static get RIGHT() {\n    return RIGHT;\n  }\n}\n\nclass Degrees extends Angle {\n  constructor(degrees) {\n    //return new Angle(degrees, degreesToRadians(degrees));\n    super(degrees, degreesToRadians(degrees));\n  }\n}\n\nclass Radians extends Angle {\n  constructor(radians) {\n    //return new Angle(radiansToDegrees(radians), radians);\n    super(radiansToDegrees(radians), radians);\n  }\n}\n\nconst UP = new Radians(0);\nconst LEFT = new Radians(Math.PI / 2);\nconst DOWN = new Radians(Math.PI);\nconst RIGHT = new Radians((3 * Math.PI) / 2);\n\nexport { Degrees, Radians };\n","import { Degrees } from \"./Utilities/Angle\";\n\nfunction updateContext(drawSettings) {\n  let context = drawSettings.context;\n  context.save();\n\n  context.translate(drawSettings.x, drawSettings.y);\n  context.rotate(drawSettings.rotation.radians);\n  context.scale(drawSettings.xScale, drawSettings.yScale);\n}\n\nfunction restoreContext(drawSettings) {\n  drawSettings.context.restore();\n}\n\nclass Composite {\n  constructor() {\n    this.gameObjects = [];\n  }\n\n  //TODO these shouldn't be exposed to user, use setParent\n  addGameObject(gameObject) {\n    this.gameObjects.push(gameObject);\n  }\n\n  removeGameObject(gameObject) {\n    let index = this.gameObjects.indexOf(gameObject);\n    if (index >= 0) this.gameObjects.splice(index, 1);\n  }\n\n  //TODO do not need update/render functions here, remove from composite entirely\n  render(context) {}\n  update() {}\n\n  updateAll(deltaTime) {\n    this.update(deltaTime);\n    this.gameObjects.forEach(function(gameObject) {\n      gameObject.updateAll(deltaTime);\n    });\n    this.gameObjects.forEach(function(gameObject) {\n      if (gameObject.dead) {\n        gameObject.destroyNow();\n      }\n    });\n  }\n\n  /*\n  handleAllFlags() {\n    this.gameObjects.forEach(function(gameObject) {\n      if (gameObject.dead) {\n        gameObject.destroyNow();\n      }\n    });\n  }\n  */\n\n  renderAll(context) {\n    let currDraw = {\n      context: context,\n\n      x: this.transform.x,\n      y: this.transform.y,\n\n      rotation: this.transform.rotation || new Degrees(0),\n\n      xScale: this.transform.xScale || 1,\n      yScale: this.transform.yScale || 1\n    };\n    updateContext(currDraw);\n\n    this.render(context);\n    this.gameObjects.forEach(function(gameObject) {\n      gameObject.renderAll(context);\n    });\n\n    restoreContext(currDraw);\n  }\n}\n\nexport { Composite };\n","import { Radians } from \"./Utilities/Angle\";\n\nconst defaults = {\n  x: 0,\n  y: 0,\n  depth: 0,\n\n  //TODO having a default as a reference object is problematic\n  //rotation: new Degrees(0),\n\n  xScale: 1,\n  yScale: 1\n};\n\nclass Transform {\n  //TODO setup anchors, base center and origin on these\n  constructor(options = {}) {\n    //TODO use position here\n    this.x = options.x || defaults.x;\n    this.y = options.y || defaults.y;\n    this.depth = options.depth || defaults.depth;\n\n    //this.rotation = options.rotation || defaults.rotation;\n    this.rotation = options.rotation || new Radians(0);\n\n    this.xScale = options.xScale || defaults.xScale;\n    this.yScale = options.yScale || defaults.yScale;\n\n    //TODO store and modify a different position class\n    //this.prevX;\n    //this.prevY;\n    this.update();\n  }\n\n  update(deltaTime) {\n    //TODO also want to keep track of absolute positions here???? many extra computations per frame\n    this.prevX = this.x;\n    this.prevY = this.y;\n  }\n\n  getCurrentDirection() {\n    let dx = this.x - this.prevX;\n    let dy = this.y - this.prevY;\n\n    return new Radians(Math.atan2(dy, dx) + Math.PI / 2);\n  }\n\n  getAngleToTransform(other) {\n    let thisCenter = this.getAbsoluteCenter();\n    let otherCenter = other.getAbsoluteCenter();\n\n    let dx = thisCenter.x - otherCenter.x;\n    let dy = thisCenter.y - otherCenter.y;\n    return Math.atan2(dy, dx) - Math.PI / 2;\n  }\n\n  getDistanceToTransform(other) {\n    let thisCenter = this.getAbsoluteCenter();\n    let otherCenter = other.getAbsoluteCenter();\n\n    return Math.sqrt(\n      Math.pow(thisCenter.x - otherCenter.x, 2) +\n        Math.pos(thisCenter.y - otherCenter.y, 2)\n    );\n  }\n\n  getAbsoluteRotation() {\n    return this.gameObject.parent.transform\n      .getAbsoluteRotation()\n      .addDegrees(this.rotation.degrees);\n  }\n\n  //TODO should use physics\n  //TODO include this with point\n  moveTo(x, y, distance) {\n    let dx = x - this.x;\n    let dy = y - this.y;\n\n    let hypotenuse = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    if (distance > hypotenuse) {\n      this.x = x;\n      this.y = y;\n      return true;\n    } else {\n      let angle = Math.atan2(dy, dx) + Math.PI / 2;\n      this.x += distance * Math.sin(angle);\n      this.y += distance * -Math.cos(angle);\n      return false;\n    }\n  }\n\n  setAbsoluteRotation(rotation) {\n    this.rotation = rotation.addDegrees(\n      -this.gameObject.parent.transform.getAbsoluteRotation().degrees\n    );\n  }\n\n  getAbsolutePosition(x, y) {\n    let center = this.getAbsoluteCenter();\n    let rotation = this.getAbsoluteRotation();\n    let rad = rotation.radians;\n\n    return {\n      x: center.x + x * Math.cos(rad) - y * Math.sin(rad),\n      y: center.y + x * Math.sin(rad) + y * Math.cos(rad)\n    };\n  }\n\n  getAbsoluteCenter() {\n    let parentCenter = this.gameObject.parent.transform.getAbsoluteCenter();\n    let parentRotation = this.gameObject.parent.transform.getAbsoluteRotation();\n    let rad = parentRotation.radians;\n\n    let x = this.x * this.xScale;\n    let y = this.y * this.yScale;\n\n    return {\n      x: parentCenter.x + x * Math.cos(rad) - y * Math.sin(rad),\n      y: parentCenter.y + x * Math.sin(rad) + y * Math.cos(rad)\n    };\n  }\n\n  //TODO handle scale, reference above\n  setAbsoluteCenter(center) {\n    let parentCenter = this.gameObject.parent.transform.getAbsoluteCenter();\n    let parentRotation = this.gameObject.parent.transform.getAbsoluteRotation();\n    let rad = new Radians(-parentRotation.radians).radians; // negative to negate rotation\n\n    center.x -= parentCenter.x;\n    center.y -= parentCenter.y;\n\n    this.x = center.x * Math.cos(rad) - center.y * Math.sin(rad);\n    this.y = center.x * Math.sin(rad) + center.y * Math.cos(rad);\n  }\n}\n\nclass CanvasTransform extends Transform {\n  constructor(domCanvas) {\n    super();\n\n    this.width = domCanvas.width;\n    this.height = domCanvas.height;\n\n    this.x = this.width / 2;\n    this.y = this.height / 2;\n  }\n\n  getAbsoluteCenter() {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  getAbsoluteRotation() {\n    return new Radians(0);\n  }\n}\n\nexport { Transform, CanvasTransform };\n","import { Composite } from \"./Composite\";\nimport { CanvasTransform } from \"./Transform\";\n\nclass StaticCanvas extends Composite {\n  constructor(domCanvas, load = [], start = () => {}) {\n    super();\n\n    this.ctx = domCanvas.getContext(\"2d\");\n\n    this.transform = new CanvasTransform(domCanvas);\n\n    //TODO this should be handled as part of scene class\n    Promise.all(load).then(() => {\n      start(this);\n      this.renderAll(this.ctx);\n    });\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n\n  getCanvas() {\n    return this;\n  }\n\n  getContext() {\n    return this.ctx;\n  }\n\n  //TODO this wont work when objects are added to the composites directly\n  addGameObject(gameObject) {\n    super.addGameObject(gameObject);\n    this.clear();\n    console.log(this);\n    this.renderAll(this.ctx);\n  }\n}\n\nclass Canvas extends Composite {\n  constructor(domCanvas) {\n    super();\n    //TODO probably dont need to reference game here, just handle canvases from the game itself\n    //this.game = game;\n    //this.scene = scene;\n    this.ctx = domCanvas.getContext(\"2d\");\n\n    this.transform = new CanvasTransform(domCanvas);\n\n    //this.prevTime;\n\n    //let self = this;\n    //window.requestAnimationFrame(function(currTime) {\n    //  self.gameLoop(currTime);\n    //});\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n\n  //TODO move this out of this class (game class?)\n  //TODO handle static canvas\n  gameLoop(currTime) {\n    if (!this.prevTime) this.prevTime = currTime;\n    let deltaTime = (currTime - this.prevTime) / 1000;\n    this.prevTime = currTime;\n\n    this.clear();\n    this.updateAll(deltaTime);\n    this.renderAll(this.ctx);\n\n    let self = this;\n    window.requestAnimationFrame(function(currTime) {\n      self.gameLoop(currTime);\n    });\n  }\n\n  getScene() {\n    return this.scene;\n  }\n\n  getCanvas() {\n    return this;\n  }\n\n  getContext() {\n    return this.ctx;\n  }\n}\n\nexport { Canvas, StaticCanvas };\n","import { Composite } from \"./Composite\";\nimport { Transform } from \"./Transform\";\n\nclass GameObject extends Composite {\n  constructor(parent, transform = {}, components = []) {\n    super();\n\n    // flags\n    //TODO use underscore?\n    this.active = true;\n    this.dead = false;\n    //this.dirty = false;\n\n    this.transform = new Transform(transform);\n    this.transform.gameObject = this;\n\n    this.components = [];\n    for (let i = 0; i < components.length; i++) {\n      this.addComponent(components[i]);\n    }\n\n    this.setParent(parent);\n  }\n\n  // mark for destroy, to be called at end of update\n  destroy() {\n    this.dead = true;\n  }\n\n  destroyNow() {\n    this.components.forEach(function(component) {\n      component.onDestroy();\n    });\n    this.parent.removeGameObject(this);\n  }\n\n  addComponent(component) {\n    component.gameObject = this;\n    this.components.push(component);\n  }\n\n  removeComponent(component) {\n    //TODO use dead flag???\n    let index = this.components.indexOf(component);\n    this.components.splice(index, 1);\n  }\n\n  render(ctx) {\n    if (!this.active) return;\n    this.components.forEach(function(component) {\n      component.render(ctx);\n    });\n  }\n  update(deltaTime) {\n    if (!this.active) return;\n    this.transform.update(deltaTime);\n    this.components.forEach(function(component) {\n      component.update(deltaTime);\n    });\n  }\n\n  setActive(active) {\n    this.active = active;\n    //if (active) {\n    //  this.render();\n    //}\n  }\n\n  setParent(parent, maintainAbsolutePosition) {\n    let prevCenter;\n    if (this.parent) {\n      if (maintainAbsolutePosition) {\n        prevCenter = this.transform.getAbsoluteCenter();\n      }\n\n      this.parent.removeGameObject(this);\n    }\n    this.parent = parent;\n    parent.addGameObject(this);\n\n    //TODO should also make these changes to rotation, scale etc\n    if (maintainAbsolutePosition) {\n      this.transform.setAbsoluteCenter(prevCenter);\n    }\n  }\n\n  getScene() {\n    return this.parent.getScene();\n  }\n\n  getCanvas() {\n    return this.parent.getCanvas();\n  }\n\n  getContext() {\n    return this.parent.getContext();\n  }\n}\n\nexport { GameObject };\n","class Component {\n  //TODO find a simple way to pass update/render functions in?\n\n  //TODO handleInput()?\n  update(deltaTime) {}\n  render(context) {}\n\n  onDestroy() {}\n}\n\nexport { Component };\n","class Scene {\n  constructor(canvases, assets, start) {\n    //this.canvases = canvases || [];\n    this.canvases = [];\n    for (let canvas of canvases) {\n      this.addCanvas(canvas);\n    }\n\n    this.assets = assets || new Assets();\n\n    this.start = start;\n  }\n\n  addAssets(key, asset) {\n    this.assets.key = asset;\n  }\n\n  addCanvas(canvas) {\n    canvas.scene = this;\n    this.canvases.push(canvas);\n  }\n\n  //TODO handle gameloop from here\n  load() {\n    this.assets.load.then(() => {\n      console.log(this);\n      this.start();\n      window.requestAnimationFrame(currTime => {\n        for (let canvas of this.canvases) {\n          canvas.gameLoop(currTime);\n        }\n      });\n    });\n  }\n}\n\nclass Assets {\n  constructor(assets = {}) {\n    this.assets = assets;\n\n    this.load = new Promise(resolve => {\n      let assets = [];\n      for (let asset in this.assets) {\n        console.log(asset);\n        console.log(this.assets);\n        //TODO get function?\n        assets.push(this.assets[asset].load);\n      }\n      Promise.all(assets).then(resolve);\n    });\n  }\n\n  /*\n  load() {\n    return new Promise(resolve => {\n      let assets = [];\n      for (let asset in this.assets) {\n        assets.push(this.assets[asset].load);\n      }\n      Promise.all(assets).then(resolve);\n    });\n  }\n  */\n\n  get(key) {\n    return this.assets[key];\n  }\n}\n\nexport { Scene, Assets };\n","import { Component } from \"../Component\";\n\nfunction recalculateIndex(image) {\n  image._framesPerRow = image.width === 0 ? 1 : image.image.width / image.width;\n  if (image.frameIndex >= image.numberOfFrames) image.frameIndex = 0;\n  image._xIndex = (image.frameIndex + image.xIndexStart) % image._framesPerRow;\n  image._yIndex =\n    image.yIndexStart +\n    Math.floor((image.xIndexStart + image.frameIndex) / image._framesPerRow);\n}\n\nfunction getWeightedIndex(arr) {\n  let random = Math.random();\n  let prevTotal = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (random < arr[i] + prevTotal) {\n      return i;\n    }\n    prevTotal += arr[i];\n  }\n  return -1;\n}\n\n//TODO use symbols??\nconst types = {\n  default: \"default\",\n  tiled: \"tiled\",\n  stretched: \"stretched\",\n  randomTiled: \"randomTiled\"\n};\n\nclass Image extends Component {\n  constructor(options = {}) {\n    super();\n\n    this.image = new window.Image();\n\n    this.type = types.default;\n\n    this.ticksPerFrame = 0;\n    this.numberOfFrames = 1;\n\n    this._xIndex = 0;\n    this._yIndex = 0;\n    this.xIndexStart = 0;\n    this.yIndexStart = 0;\n    this._framesPerRow = 1; //TODO this needs a better default\n\n    this.loop = true;\n    this.onFinish = function() {};\n\n    // these are for random tiling\n    this.xWeight = [1];\n    this.yWeight = [1];\n\n    this.frameIndex = 0;\n    this.tickCount = 0;\n\n    this.updateOptions(options);\n\n    //TODO reverse this naming\n    this.width = this.width || this.image.width;\n    this.height = this.height || this.image.height;\n    this.destWidth = this.destWidth || this.width;\n    this.destHeight = this.destHeight || this.height;\n  }\n\n  updateOptions(options = {}) {\n    // checking for undefined to account for 0 values\n    if (options.image !== undefined) this.image = options.image;\n\n    if (options.type !== undefined) this.type = options.type;\n\n    //TODO could generlize below, but not above. override?\n    if (options.width !== undefined) this.width = options.width;\n    if (options.height !== undefined) this.height = options.height;\n\n    if (options.destWidth !== undefined) this.destWidth = options.destWidth;\n    if (options.destHeight !== undefined) this.destHeight = options.destHeight;\n\n    if (options.xWeight !== undefined) this.xWeight = options.xWeight;\n    if (options.yWeight !== undefined) this.yWeight = options.yWeight;\n\n    if (options.ticksPerFrame !== undefined)\n      this.ticksPerFrame = options.ticksPerFrame;\n    if (options.numberOfFrames !== undefined)\n      this.numberOfFrames = options.numberOfFrames;\n\n    if (options.startingColumn !== undefined)\n      this.xIndexStart = options.startingColumn;\n    if (options.startingRow !== undefined)\n      this.yIndexStart = options.startingRow;\n\n    if (options.loop !== undefined) this.loop = options.loop;\n    if (options.onFinish !== undefined) this.onFinish = options.onFinish;\n\n    if (options.frameIndex !== undefined) this.frameIndex = options.frameIndex;\n    if (options.tickCount !== undefined) this.tickCount = options.tickCount;\n\n    recalculateIndex(this);\n  }\n\n  update(deltaTime) {\n    this.tickCount++;\n    if (this.tickCount > this.ticksPerFrame) {\n      this.tickCount = 0;\n      //let currentFrame = this.frameIndex(this.xIndex, this.yIndex);\n      //let startingFrame = this.frameIndex(this.xIndexStart, this.yIndexStart);\n      //let processedFrames = currentFrame - startingFrame;\n      if (this.frameIndex < this.numberOfFrames - 1) {\n        this.frameIndex++;\n        this._xIndex++;\n        if (this._xIndex >= this._framesPerRow) {\n          this._xIndex = 0;\n          this._yIndex++;\n        }\n      } else if (this.loop) {\n        this.frameIndex = 0;\n        this._xIndex = this.xIndexStart;\n        this._yIndex = this.yIndexStart;\n      } else {\n        this.onFinish(this);\n      }\n    }\n  }\n\n  render(ctx) {\n    let destWidth = this.destWidth === undefined ? this.width : this.destWidth;\n    let destHeight =\n      this.destHeight === undefined ? this.height : this.destHeight;\n    //console.log(this.image);\n    if (this.type === types.stretched) {\n      ctx.drawImage(\n        this.image,\n        this._xIndex * this.width,\n        this._yIndex * this.height,\n        this.width,\n        this.height,\n        -destWidth / 2,\n        -destHeight / 2,\n        destWidth,\n        destHeight\n      );\n    } else if (this.type === types.tiled) {\n      //TODO this wont be bounded correctly\n      let currTileX = -destWidth / 2;\n      let endTileX = destWidth / 2;\n\n      let endTileY = destHeight / 2;\n      while (currTileX < endTileX) {\n        let currTileY = -destHeight / 2;\n        while (currTileY < endTileY) {\n          ctx.drawImage(\n            this.image,\n            this._xIndex * this.width,\n            this._yIndex * this.height,\n            this.width,\n            this.height,\n            currTileX,\n            currTileY,\n            this.width,\n            this.height\n          );\n\n          currTileY += this.height;\n        }\n        currTileX += this.width;\n      }\n    } else if (this.type === types.randomTiled) {\n      let numTilesX = this.xWeight.length;\n      let numTilesY = this.yWeight.length;\n\n      let tileWidth = this.width / numTilesX;\n      let tileHeight = this.height / numTilesY;\n\n      //TODO this wont be bounded correctly\n      let currTileX = -destWidth / 2;\n      let endTileX = destWidth / 2;\n\n      let endTileY = destHeight / 2;\n      while (currTileX < endTileX) {\n        let currTileY = -destHeight / 2;\n        while (currTileY < endTileY) {\n          let xRandom = getWeightedIndex(this.xWeight);\n          let yRandom = getWeightedIndex(this.yWeight);\n\n          let xTile = this._xIndex * this.width + xRandom * tileWidth;\n          let yTile = this._yIndex * this.height + yRandom * tileHeight;\n\n          ctx.drawImage(\n            this.image,\n            xTile,\n            yTile,\n            tileWidth,\n            tileHeight,\n            currTileX,\n            currTileY,\n            tileWidth,\n            tileHeight\n          );\n\n          currTileY += tileHeight;\n        }\n        currTileX += tileWidth;\n      }\n    } else {\n      // default\n      //TODO currently just draws at source size, may need to bound?\n      ctx.drawImage(\n        this.image,\n        this._xIndex * this.width,\n        this._yIndex * this.height,\n        this.width,\n        this.height,\n        -this.width / 2,\n        -this.height / 2,\n        this.width,\n        this.height\n      );\n    }\n  }\n}\n\nImage.types = types;\n\nexport { Image };\n","import { Component } from \"../Component\";\n\n//TODO also want vector (angle + speed), consolidate this with physics\n//TODO make vector and coodinates interchangable\nclass SimplePhysics extends Component {\n  constructor(options = {}) {\n    super();\n\n    this.xv = options.xv || 0;\n    this.yv = options.yv || 0;\n  }\n\n  update(deltaTime) {\n    this.gameObject.transform.x += this.xv;\n    this.gameObject.transform.y += this.yv;\n  }\n}\n\nexport { SimplePhysics };\n","import { Component } from \"../Component\";\n\nclass Polygon extends Component {\n  constructor(options) {\n    super();\n\n    this.vertOffset = [];\n\n    this.updateOptions(options);\n  }\n\n  updateOptions(opts) {\n    //TODO strokestyle\n\n    opts.radius = opts.radius || 10;\n    opts.vert = opts.vert || 0;\n    opts.jaggedness = opts.jaggedness || 0;\n\n    opts.strokeStyle = opts.strokeStyle || \"black\";\n    opts.fillStyle = opts.fillStyle || \"transparent\";\n\n    this.options = opts;\n\n    this.vertOffset = [];\n    for (let i = 0; i < opts.vert; i++) {\n      this.vertOffset.push(\n        Math.random() * opts.jaggedness * 2 + 1 - opts.jaggedness\n      );\n    }\n  }\n\n  render(ctx) {\n    //TODO cache with dirty flag\n    //let ctx = this.gameObject.getContext();\n\n    ctx.save();\n    ctx.strokeStyle = this.options.strokeStyle;\n    ctx.fillStyle = this.options.fillStyle;\n\n    ctx.beginPath();\n    if (this.options.vert <= 0) {\n      ctx.arc(0, 0, this.options.radius, 0, Math.PI * 2);\n    } else {\n      ctx.moveTo(\n        this.options.radius *\n          this.vertOffset[0] *\n          Math.cos(this.gameObject.transform.rotation.degrees),\n        this.options.radius *\n          this.vertOffset[0] *\n          Math.sin(this.gameObject.transform.rotation.degrees)\n      );\n      for (let i = 1; i < this.options.vert; i++) {\n        ctx.lineTo(\n          this.options.radius *\n            this.vertOffset[i] *\n            Math.cos(\n              this.gameObject.transform.rotation.degrees +\n                (i * Math.PI * 2) / this.options.vert\n            ),\n          this.options.radius *\n            this.vertOffset[i] *\n            Math.sin(\n              this.gameObject.transform.rotation.degrees +\n                (i * Math.PI * 2) / this.options.vert\n            )\n        );\n      }\n      ctx.closePath();\n    }\n    ctx.stroke();\n    ctx.fill();\n    ctx.restore();\n  }\n}\n\nexport { Polygon };\n","import { Component } from \"../Component\";\n\nclass Rectangle extends Component {\n  constructor(options) {\n    super();\n\n    this.height = options.height;\n    this.width = options.width;\n  }\n\n  render(ctx) {\n    //let ctx = this.gameObject.getContext();\n    ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n  }\n}\n\nexport { Rectangle };\n","import { Component } from \"../Component\";\nimport { Degrees } from \"../Utilities/Angle\";\n\nclass Physics extends Component {\n  constructor(options = {}) {\n    super();\n\n    //TODO use position type\n    this.angle = options.angle || new Degrees(0);\n    this.speed = options.speed || 0;\n\n    this.distanceTraveled = 0;\n    this.maxDistance = options.maxDistance || Infinity;\n    this.callback =\n      options.callback ||\n      (() => {\n        this.gameObject.destroy();\n      });\n  }\n\n  update(deltaTime) {\n    let xv = this.speed * Math.sin(this.angle.radians);\n    let yv = this.speed * -Math.cos(this.angle.radians);\n\n    this.gameObject.transform.x += xv;\n    this.gameObject.transform.y += yv;\n\n    // this wont account for boundaries or other forces\n    this.distanceTraveled += this.speed;\n    if (this.distanceTraveled >= this.maxDistance) {\n      this.callback();\n    }\n  }\n}\n\nexport { Physics };\n","import { Component } from \"../Component\";\nimport { Degrees } from \"../Utilities/Angle\";\n\n//TODO could be a subcomponent of physics??\nclass Acceleration extends Component {\n  constructor(physics, options = {}) {\n    super();\n\n    this.physics = physics;\n\n    this.active = options.active || true;\n    //TODO vector class\n    this.angle = options.angle || new Degrees(0);\n    this.accel = options.accel || 0;\n    //TODO rename to drag\n    this.friction = options.friction || 0;\n  }\n\n  update(deltaTime) {\n    if (this.active) {\n      this.physics.xv += this.accel * Math.sin(this.angle.radians);\n      this.physics.yv += this.accel * -Math.cos(this.angle.radians);\n    } else {\n      //TODO this friction value is affected for side to side even for down friction\n      this.physics.xv -= this.physics.xv * this.friction;\n      this.physics.yv -= this.physics.yv * this.friction;\n    }\n  }\n}\n\nexport { Acceleration };\n","import { Component } from \"../Component\";\n\nclass Hitcircle extends Component {\n  constructor(options) {\n    super();\n\n    this.radius = options.radius || 10;\n\n    //TODO generalize this behavior in a superclass\n    this.hurtboxes = options.hurtboxes || [];\n    this.hitboxSet = options.hitboxSet || [];\n\n    this.onCollision = options.onCollision || function() {};\n    this.onCollisionEnter = options.onCollisionEnter || function() {};\n    this.onCollisionExit = options.onCollisionExit || function() {};\n\n    this.collidingWith = [];\n\n    this.hitboxSet.push(this);\n  }\n\n  update(deltaTime) {\n    let num = this.hurtboxes.length;\n    for (let i = 0; i < num; i++) {\n      let hurtbox = this.hurtboxes[i];\n      //TODO maybe use a hash, not array\n      let collidingWithIndex = this.collidingWith.indexOf(hurtbox);\n      let prevColliding = collidingWithIndex >= 0;\n      if (hurtbox.collidingWithHitcircle(this)) {\n        if (!prevColliding) {\n          this.collidingWith.push(hurtbox);\n          this.onCollisionEnter(hurtbox);\n        }\n        this.onCollision(hurtbox);\n      } else {\n        if (prevColliding) {\n          this.collidingWith.splice(collidingWithIndex, 1);\n          this.onCollisionExit(hurtbox);\n        }\n      }\n    }\n  }\n\n  onDestroy() {\n    let index = this.hitboxSet.indexOf(this);\n    this.hitboxSet.splice(index, 1);\n  }\n\n  //TODO handle rotation??\n  collidingWithHitbox(hitbox) {\n    let thisCenter = this.gameObject.transform.getAbsoluteCenter();\n    let hitboxCenter = hitbox.gameObject.transform.getAbsoluteCenter();\n    if (thisCenter.x < hitboxCenter.x - hitbox.width / 2 - this.radius)\n      return false;\n    if (thisCenter.x > hitboxCenter.x + hitbox.width / 2 + this.radius)\n      return false;\n    if (thisCenter.y < hitboxCenter.y - hitbox.height / 2 - this.radius)\n      return false;\n    if (thisCenter.y > hitboxCenter.y + hitbox.height / 2 + this.radius)\n      return false;\n\n    return true;\n  }\n\n  collidingWithHitcircle(hitcircle) {\n    let thisCenter = this.gameObject.transform.getAbsoluteCenter();\n    let hitcircleCenter = hitcircle.gameObject.transform.getAbsoluteCenter();\n    let distanceBetween = Math.sqrt(\n      Math.pow(thisCenter.x - hitcircleCenter.x, 2) +\n        Math.pow(thisCenter.y - hitcircleCenter.y, 2)\n    );\n    return distanceBetween < this.radius + hitcircle.radius;\n  }\n\n  clearCollisions() {\n    this.collidingWith = [];\n  }\n}\n\nexport { Hitcircle };\n","import { Component } from \"../Component\";\n\nclass Hitbox extends Component {\n  constructor(options) {\n    super();\n\n    this.width = options.width || 10;\n    this.height = options.height || 10;\n\n    //TODO generalize this behavior in a superclass\n    this.hurtboxes = options.hurtboxes || [];\n    this.hitboxSet = options.hitboxSet || [];\n\n    this.onCollision = options.onCollision || function() {};\n    this.onCollisionEnter = options.onCollisionEnter || function() {};\n    this.onCollisionExit = options.onCollisionExit || function() {};\n\n    this.collidingWith = [];\n\n    this.hitboxSet.push(this);\n  }\n\n  update(deltaTime) {\n    let num = this.hurtboxes.length;\n    for (let i = 0; i < num; i++) {\n      let hurtbox = this.hurtboxes[i];\n      //TODO maybe use a hash, not array\n      let collidingWithIndex = this.collidingWith.indexOf(hurtbox);\n      let prevColliding = collidingWithIndex >= 0;\n      if (hurtbox.collidingWithHitbox(this)) {\n        if (!prevColliding) {\n          this.collidingWith.push(hurtbox);\n          this.onCollisionEnter(hurtbox);\n        }\n        this.onCollision(hurtbox);\n      } else {\n        if (prevColliding) {\n          this.collidingWith.splice(collidingWithIndex, 1);\n          this.onCollisionExit(hurtbox);\n        }\n      }\n    }\n  }\n\n  onDestroy() {\n    let index = this.hitboxSet.indexOf(this);\n    this.hitboxSet.splice(index, 1);\n  }\n\n  //TODO handle rotation?? use absoluteposition(x,y)\n  collidingWithHitbox(hitbox) {\n    let thisCenter = this.gameObject.transform.getAbsoluteCenter();\n    let hitboxCenter = hitbox.gameObject.transform.getAbsoluteCenter();\n    if (thisCenter.x < hitboxCenter.x - hitbox.width / 2 - this.width / 2)\n      return false;\n    if (thisCenter.x > hitboxCenter.x + hitbox.width / 2 + this.width / 2)\n      return false;\n    if (thisCenter.y < hitboxCenter.y - hitbox.height / 2 - this.height / 2)\n      return false;\n    if (thisCenter.y > hitboxCenter.y + hitbox.height / 2 + this.height / 2)\n      return false;\n\n    return true;\n  }\n\n  collidingWithHitcircle(hitcircle) {\n    let thisCenter = this.gameObject.transform.getAbsoluteCenter();\n    let hitcircleCenter = hitcircle.gameObject.transform.getAbsoluteCenter();\n    if (thisCenter.x < hitcircleCenter.x - hitcircle.radius - this.width / 2)\n      return false;\n    if (thisCenter.x > hitcircleCenter.x + hitcircle.radius + this.width / 2)\n      return false;\n    if (thisCenter.y < hitcircleCenter.y - hitcircle.radius - this.height / 2)\n      return false;\n    if (thisCenter.y > hitcircleCenter.y + hitcircle.radius + this.height / 2)\n      return false;\n\n    return true;\n  }\n\n  clearCollisions() {\n    this.collidingWith = [];\n  }\n}\n\nexport { Hitbox };\n","import { Component } from \"../Component\";\n\nconst DEFAULT = {\n  text: \"\",\n  textAlign: \"center\",\n  textBaseline: \"middle\",\n  fillStyle: \"black\",\n  font: \"12px serif\"\n};\n\nclass Text extends Component {\n  constructor(options) {\n    super();\n\n    this.text = options.text || DEFAULT.text;\n\n    this.textAlign = options.textAlign || DEFAULT.textAlign;\n    this.textBaseline = options.textBaseline || DEFAULT.textBaseline;\n    this.fillStyle = options.fillStyle || DEFAULT.fillStyle;\n    this.font = options.font || DEFAULT.font;\n  }\n\n  render(ctx) {\n    //let ctx = this.gameObject.getContext();\n\n    ctx.save();\n    ctx.font = this.font;\n    ctx.fillStyle = this.fillStyle;\n    ctx.textAlign = this.textAlign;\n    ctx.textBaseline = this.textBaseline;\n\n    ctx.fillText(this.text, 0, 0);\n    ctx.restore();\n  }\n}\n\nexport { Text };\n","import { Component } from \"../Component\";\n\n//TODO maybe dont make audio a component??\nclass Audio extends Component {\n  constructor(options = {}) {\n    super();\n\n    this.audio = new window.Audio();\n\n    this.audio.volume = options.volume || 1;\n  }\n\n  play(clip) {\n    //TODO this is causing problems when multiple monster are getting hit at once\n    this.audio.src = clip;\n    this.audio.currentTime = 0;\n    this.audio.play();\n  }\n}\n\nexport { Audio };\n","import { Component } from \"../Component\";\n\nclass Slider extends Component {\n  constructor(options) {\n    super();\n\n    this.height = options.height !== undefined ? options.height : 100;\n    this.width = options.width !== undefined ? options.width : 20;\n\n    this.value = options.value !== undefined ? options.value : 100;\n    this.maxValue = options.maxValue !== undefined ? options.maxValue : 100;\n\n    this.fillColor =\n      options.fillColor !== undefined ? options.fillColor : \"red\";\n    this.emptyColor =\n      options.emptyColor !== undefined ? options.emptyColor : \"grey\";\n  }\n\n  render(ctx) {\n    let fillPercent = this.value / this.maxValue;\n\n    ctx.fillStyle = this.emptyColor;\n    ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n    ctx.fillStyle = this.fillColor;\n    ctx.fillRect(\n      -this.width / 2,\n      -this.height / 2,\n      this.width * fillPercent,\n      this.height * fillPercent\n    );\n  }\n}\n\nexport { Slider };\n","import { Radians } from \"./Angle\";\n\nfunction recalculateVector(position) {\n  position._angle.radians = Math.atan2(position._y, position._x) + Math.PI / 2;\n  position._magnitude = Math.sqrt(\n    Math.pow(position._x, 2) + Math.pow(position._y, 2)\n  );\n  position._dirtyVector = false;\n}\nfunction recalculateCoordinates(position) {\n  position._x = Math.sin(position._angle.radians) * position._magnitude;\n  position._y = -Math.cos(position._angle.radians) * position._magnitude;\n  position._dirtyCoordinates = false;\n  position._prevRadians = position._angle.radians;\n}\n\nclass Position {\n  constructor() {\n    this._x;\n    this._y;\n\n    this._angle = new Radians(0);\n    this._magnitude;\n\n    this._dirtyCoordinates;\n    this._dirtyVector;\n    this._prevRadians = this._angle.radians;\n  }\n\n  add(position) {\n    this.x += position.x;\n    this.y += position.y;\n  }\n\n  //TODO need to check if angle is dirty too\n  get x() {\n    if (this._dirtyCoordinates || this._angle.radians != this._prevRadians) {\n      recalculateCoordinates(this);\n    }\n    return this._x;\n  }\n  set x(x) {\n    this._x = x;\n    this._dirtyVector = true;\n  }\n\n  get y() {\n    if (this._dirtyCoordinates || this._angle.radians != this._prevRadians) {\n      recalculateCoordinates(this);\n    }\n    return this._y;\n  }\n  set y(y) {\n    this._y = y;\n    this._dirtyVector = true;\n  }\n\n  get angle() {\n    if (this._dirtyVector) {\n      recalculateVector(this);\n    }\n    return this._angle;\n  }\n  set angle(angle) {\n    this._angle = angle;\n    this._dirtyCoordinates = true;\n  }\n\n  get magnitude() {\n    if (this._dirtyVector) {\n      recalculateVector(this);\n    }\n    return this._magnitude;\n  }\n  set magnitude(magnitude) {\n    this._magnitude = magnitude;\n    this._dirtyCoordinates = true;\n  }\n\n  static get UNIT_LEFT() {\n    return UNIT_LEFT;\n  }\n  static get UNIT_RIGHT() {\n    return UNIT_RIGHT;\n  }\n  static get UNIT_UP() {\n    return UNIT_UP;\n  }\n  static get UNIT_DOWN() {\n    return UNIT_DOWN;\n  }\n}\n\n//TODO defaults, including zero angle\nclass Coordinates extends Position {\n  constructor(x, y) {\n    super();\n    this._x = x;\n    this._y = y;\n    this._dirtyVector = true;\n  }\n}\n\nclass Vector extends Position {\n  constructor(angle, magnitude) {\n    super();\n    this._angle = angle;\n    this._magnitude = magnitude;\n    this._dirtyCoordinates = true;\n  }\n}\n\nconst UNIT_LEFT = new Coordinates(-1, 0);\nconst UNIT_RIGHT = new Coordinates(1, 0);\nconst UNIT_UP = new Coordinates(0, -1);\nconst UNIT_DOWN = new Coordinates(0, 1);\n\nexport { Coordinates, Vector };\n","//TODO refactor this to have \"up, down, etc\" and check all the inputs\n\nclass Input {\n  constructor(canvas, options, handler) {\n    this.canvas = canvas;\n\n    this.activeInputs = {};\n    this.registeredInputs = {};\n\n    Object.keys(options).forEach(command => {\n      this.activeInputs[command] = false;\n      this.registerCommand(command, options[command]);\n    });\n\n    document.addEventListener(\"keydown\", event => {\n      if (this.registeredInputs[event.keyCode]) {\n        event.preventDefault();\n        if (event.repeat) return;\n        this.activeInputs[this.registeredInputs[event.keyCode]] = true;\n        handler(this.activeInputs);\n      }\n    });\n    document.addEventListener(\"keyup\", event => {\n      if (this.registeredInputs[event.keyCode]) {\n        event.preventDefault();\n        this.activeInputs[this.registeredInputs[event.keyCode]] = false;\n        handler(this.activeInputs);\n      }\n    });\n\n    //TODO have to redo mouse handlers\n    /*\n    if (mouseMoveHandler) {\n      document.onmousemove = event => {\n        //TODO hardcoded, need reference stored\n        //let rect = engine.canvases\n        //.get(\"canvas\")\n        let rect = this.canvas.ctx.canvas.getBoundingClientRect();\n        //console.log(engine.canvases.get(\"canvas\"));\n        mouseMoveHandler({\n          x:\n            event.clientX -\n            Math.round(rect.left - 0.5) -\n            this.canvas.transform.x,\n          y:\n            event.clientY - Math.round(rect.top - 0.5) - this.canvas.transform.y\n        });\n      };\n    }\n    */\n    //TODO maybe input should be tied to canvas?\n    /*\n    if (mouseClickHandler) {\n      //TODO bind this to not effect the whole document?\n      document.body.addEventListener(\"click\", event => {\n        //TODO hardcoded, need reference stored\n        //let rect = engine.canvases\n        //.get(\"canvas\")\n        let rect = this.canvas.ctx.canvas.getBoundingClientRect();\n        mouseClickHandler({\n          x:\n            event.clientX -\n            Math.round(rect.left - 0.5) -\n            this.canvas.transform.x,\n          y:\n            event.clientY - Math.round(rect.top - 0.5) - this.canvas.transform.y\n        });\n      });\n    }\n    */\n\n    //TODO maybe have an option to remove this, will need to store function names\n    /*\n        return {\n            remove: function() {\n                document.removeEventListener(\"keydown\", name);\n                document.removeEventListener(\"keyup\", name);\n            }\n        };\n        */\n  }\n  //TODO bool to handle mouse?\n\n  //TODO maybe allow more params here, interruptable, cancellable\n  //TODO maybe allow some granularity in here, defined additional categories by objects\n  registerCommand(command, keycode) {\n    if (Array.isArray(keycode)) {\n      keycode.forEach(function(key) {\n        registerCommand(command, key);\n      });\n    } else {\n      this.registeredInputs[keycode] = command;\n    }\n  }\n}\n\nexport { Input };\n","//TODO maybe just constantly maintain all possible keyboard inputs (like mouse)\nclass Keyboard {\n  //TODO consolidate these\n  constructor(options, onKeyDown = {}, onKeyUp = {}) {\n    this.activeInputs = {};\n    this.registeredInputs = {};\n\n    this.onKeyDown = onKeyDown;\n    this.onKeyUp = onKeyUp;\n\n    Object.keys(options).forEach(keyCode => {\n      this.activeInputs[options[keyCode]] = false;\n      this.registerCommand(keyCode, options[keyCode]);\n    });\n\n    document.addEventListener(\"keydown\", event => {\n      if (this.registeredInputs[event.keyCode]) {\n        event.preventDefault();\n        if (event.repeat) return;\n        this.activeInputs[this.registeredInputs[event.keyCode]] = true;\n        //handler(this.activeInputs);\n      }\n      if (this.onKeyDown[event.keyCode]) {\n        event.preventDefault();\n        if (event.repeat) return;\n        this.onKeyDown[event.keyCode]();\n      }\n    });\n    document.addEventListener(\"keyup\", event => {\n      if (this.registeredInputs[event.keyCode]) {\n        event.preventDefault();\n        this.activeInputs[this.registeredInputs[event.keyCode]] = false;\n        //handler(this.activeInputs);\n      }\n      if (this.onKeyUp[event.keyCode]) {\n        event.preventDefault();\n        this.onKeyUp[event.keyCode]();\n      }\n    });\n\n    //console.log(this.registeredInputs);\n    //console.log(this.activeInputs);\n    return this.activeInputs;\n  }\n\n  //TODO maybe allow more params here, interruptable, cancellable\n  //TODO maybe allow some granularity in here, defined additional categories by objects\n  registerCommand(keycode, command) {\n    if (Array.isArray(keycode)) {\n      keycode.forEach(function(key) {\n        registerCommand(command, key);\n      });\n    } else {\n      this.registeredInputs[keycode] = command;\n    }\n  }\n}\n\nexport { Keyboard };\n","class Mouse {\n  constructor(canvas, onLeftClick, onRightClick) {\n    this.canvas = canvas;\n    //TODO these should be readonly\n    this.x = 0;\n    this.y = 0;\n    //this.leftClick;\n\n    //TODO handle middle and right click\n    //TODO handle scroll wheel\n\n    document.addEventListener(\"mousemove\", event => {\n      let rect = this.canvas.ctx.canvas.getBoundingClientRect();\n      this.x =\n        event.clientX - Math.round(rect.left - 0.5) - this.canvas.transform.x;\n      this.y =\n        event.clientY - Math.round(rect.top - 0.5) - this.canvas.transform.y;\n    });\n    document.addEventListener(\"mousedown\", event => {\n      this.leftClick = true;\n    });\n    document.addEventListener(\"mouseup\", event => {\n      this.leftClick = false;\n    });\n\n    if (onLeftClick) {\n      document.body.addEventListener(\"click\", event => {\n        onLeftClick(this);\n      });\n    }\n\n    if (onRightClick) {\n      document.addEventListener(\"contextmenu\", event => {\n        event.preventDefault();\n        onRightClick(this);\n      });\n    }\n  }\n}\n\nexport { Mouse };\n","/*\nclass DomImage {\n  constructor(src) {\n    this.image = new Image();\n    this.image.load = new Promise((resolve, reject) => {\n      this.image.onload(resolve);\n      this.image.onerror(reject);\n    });\n    this.image.src = src;\n  }\n\n  /*\n  load() {\n    return new Promise((resolve, reject) => {\n      console.log(this.image);\n      if (this.image.complete) {\n        resolve();\n      } else {\n        this.image.onload(resolve);\n        this.image.onerror(reject);\n      }\n    });\n  }\n  *\n}\n*/\n\nconst DomImage = function(src) {\n  let image = new window.Image();\n  image.src = src;\n  image.load = new Promise((resolve, reject) => {\n    image.onload = resolve;\n    image.onerror = reject;\n  });\n  return image;\n};\n\nexport { DomImage };\n","import { Canvas, StaticCanvas } from \"./Canvas\";\nimport { GameObject } from \"./GameObject\";\nimport { Component } from \"./Component\";\nimport { Scene, Assets } from \"./Scene\";\n\n//import { Transform } from \"./Components/Transform\";\nimport { Image } from \"./Components/Image\";\nimport { SimplePhysics } from \"./Components/SimplePhysics\";\nimport { Polygon } from \"./Components/Polygon\";\nimport { Rectangle } from \"./Components/Rectangle\";\nimport { Physics } from \"./Components/Physics\";\nimport { Acceleration } from \"./Components/Acceleration\";\nimport { Hitcircle } from \"./Components/Hitcircle\";\nimport { Hitbox } from \"./Components/Hitbox\";\nimport { Text } from \"./Components/Text\";\nimport { Audio } from \"./Components/Audio\";\nimport { Slider } from \"./Components/Slider\";\n\n//import { Vector } from \"./Utilities/Vector\";\n//import { Coordinates } from \"./Utilities/Coordinates\";\nimport { Degrees, Radians } from \"./Utilities/Angle\";\nimport { Coordinates, Vector } from \"./Utilities/Position\";\n\n//TODO this needs to be totally reworked\nimport { Input } from \"./Input/Input\";\nimport { Keyboard } from \"./Input/Keyboard\";\nimport { Mouse } from \"./Input/Mouse\";\n\nimport { DomImage } from \"./Dom/Image\";\n\nlet Dna = {\n  //TODO should probably consolidate these\n  Canvas: Canvas,\n  StaticCanvas: StaticCanvas,\n  GameObject: GameObject,\n  Component: Component,\n  Scene: Scene,\n  Assets: Assets,\n  //Transform: Transform,\n\n  Components: {\n    Image: Image,\n    SimplePhysics: SimplePhysics,\n    Polygon: Polygon,\n    Rectangle: Rectangle,\n    Physics: Physics,\n    Acceleration: Acceleration,\n    Hitcircle: Hitcircle,\n    Hitbox: Hitbox,\n    Text: Text,\n    Audio: Audio,\n    Slider: Slider\n  },\n  Utilities: {\n    Degrees: Degrees,\n    Radians: Radians,\n    Coordinates: Coordinates,\n    Vector: Vector\n  },\n  Input: {\n    Input: Input,\n    Keyboard: Keyboard,\n    Mouse: Mouse\n  },\n  Dom: {\n    Image: DomImage\n  }\n};\n\nwindow.Dna = Dna;\n"]}