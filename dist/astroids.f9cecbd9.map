{"version":3,"sources":["astroids/Ship.js","astroids/ShipPrefab.js","astroids/Astroid.js","astroids/AstroidPrefab.js","astroids/astroids.js"],"names":["SHIP_COLOR","SHIP_SIZE","SHIP_THRUST","FRICTION","TURN_SPEED","SHIP_RADIUS","Ship","options","ctx","gameObject","getContext","strokeStyle","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","Dna","Component","ShipPrefab","parent","position","GameObject","Astroid","r","elapsedTime","canvas","getCanvas","transform","x","width","y","height","ASTROID_SPEED","ASTROID_VERT","ASTROID_JAG","ASTROID_POINTS_LARGE","ASTROID_POINTS_MEDIUM","ASTROID_POINTS_SMALL","ASTROID_LARGE","ASTROID_MEDIUM","ASTROID_SMALL","AstroidPrefab","level","levelMultiplier","Components","Polygon","vert","Math","floor","random","jaggedness","Physics","xv","yv","astroids","points","push","ASTROIDS_MEDIUM","index","indexOf","splice","NUM_ASTROIDS","ASTROID_SIZE","Canvas","document","getElementById","ship","distBetweenPoints","x1","y1","x2","y2","sqrt","pow","createAstroidBelt","restore","domCanvas","dist","i"],"mappings":"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","file":"astroids.f9cecbd9.map","sourceRoot":"..","sourcesContent":["const SHIP_COLOR = \"black\";\r\nconst SHIP_SIZE = 30;\r\nconst SHIP_THRUST = 5;\r\nconst FRICTION = 0.7;\r\nconst TURN_SPEED = 360; // degrees per second\r\nconst SHIP_RADIUS = SHIP_SIZE / 2;\r\n\r\nclass Ship extends Dna.Component {\r\n  constructor(options) {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    let ctx = this.gameObject.getContext();\r\n\r\n    ctx.strokeStyle = SHIP_COLOR;\r\n    ctx.lineWidth = SHIP_SIZE / 20;\r\n    ctx.beginPath();\r\n    ctx.moveTo(0, -SHIP_RADIUS);\r\n    ctx.lineTo((2 / 3) * SHIP_RADIUS, SHIP_RADIUS);\r\n    ctx.lineTo(-(2 / 3) * SHIP_RADIUS, SHIP_RADIUS);\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nexport { Ship };\r\n","import { Ship } from \"./Ship\";\n\nclass ShipPrefab extends Dna.GameObject {\n  constructor(parent, position) {\n    super(parent, position, [new Ship()]);\n    //this.r = polygon.r;\n    /*\n    this.components[\"Hitbox\"] = new Hitbox(this, {\n      collisionClass: \"ship\",\n      r: this.options.r,\n      onHit: {\n        astroid: function(astroid) {\n          console.log(\"ship hit\");\n        }\n      },\n      show: true\n    });\n    */\n  }\n}\n\nexport { ShipPrefab };\n","class Astroid extends Dna.Component {\r\n  constructor(r) {\r\n    super();\r\n\r\n    this.r = r;\r\n  }\r\n\r\n  update(elapsedTime) {\r\n    /*\r\n    let absoluteCenter = this.position.getAbsoluteCenter();\r\n    // handle edge of screen\r\n    if (absoluteCenter.x < 0 - this.options.r) {\r\n        absoluteCenter.x = this.canvas.width + this.options.r;\r\n    } else if (absoluteCenter.x > this.canvas.width + this.options.r) {\r\n        absoluteCenter.x = 0 - this.options.r;\r\n    }\r\n    if (absoluteCenter.y < 0 - this.options.r) {\r\n        absoluteCenter.y = this.canvas.height + this.options.r;\r\n    } else if (absoluteCenter.y > this.canvas.height + this.options.r) {\r\n        absoluteCenter.y = 0 - this.options.r;\r\n    }\r\n    */\r\n\r\n    let canvas = this.gameObject.getCanvas();\r\n\r\n    if (this.gameObject.transform.x < -canvas.transform.width / 2 - this.r) {\r\n      this.gameObject.transform.x = canvas.transform.width / 2 + this.r;\r\n    } else if (\r\n      this.gameObject.transform.x >\r\n      canvas.transform.width / 2 + this.r\r\n    ) {\r\n      this.gameObject.transform.x = -canvas.transform.width / 2;\r\n    }\r\n    if (this.gameObject.transform.y < -canvas.transform.height / 2 - this.r) {\r\n      this.gameObject.transform.y = canvas.transform.height / 2 + this.r;\r\n    } else if (\r\n      this.gameObject.transform.y >\r\n      canvas.transform.height / 2 + this.r\r\n    ) {\r\n      this.gameObject.transform.y = -canvas.transform.height / 2;\r\n    }\r\n  }\r\n}\r\n\r\nexport { Astroid };\r\n","import { Astroid } from \"./Astroid\";\n\nconst ASTROID_SPEED = 5; // max starting speed\nconst ASTROID_VERT = 10; // average num of vertecies on each astroid\nconst ASTROID_JAG = 0.4; // jaggedness of astroids\nconst ASTROID_POINTS_LARGE = 20;\nconst ASTROID_POINTS_MEDIUM = 50;\nconst ASTROID_POINTS_SMALL = 100;\n\nconst ASTROID_LARGE = 50;\nconst ASTROID_MEDIUM = 25;\nconst ASTROID_SMALL = 12;\n\nclass AstroidPrefab extends Dna.GameObject {\n  constructor(parent, position, level, r = ASTROID_LARGE) {\n    let levelMultiplier = 1 + 0.1 * level;\n    super(parent, position, [\n      new Dna.Components.Polygon({\n        r: r,\n        vert: Math.floor(Math.random() * (ASTROID_VERT + 1) + ASTROID_VERT / 2),\n        jaggedness: ASTROID_JAG\n      }),\n      new Dna.Components.Physics({\n        xv:\n          Math.random() *\n          ASTROID_SPEED *\n          levelMultiplier *\n          (Math.random() < 0.5 ? 1 : -1),\n        yv:\n          Math.random() *\n          ASTROID_SPEED *\n          levelMultiplier *\n          (Math.random() < 0.5 ? 1 : -1)\n      }),\n      new Astroid(r)\n    ]);\n    this.r = r;\n  }\n\n  //TODO this should be in astroids component, need way to access\n  destroyAstroid(astroids) {\n    let points = 0;\n    if (this.options.r == ASTROID_LARGE) {\n      astroids.push(\n        new Astroid(\n          this.parent,\n          { x: this.position.x, y: this.position.y },\n          ASTROID_MEDIUM\n        )\n      );\n      astroids.push(\n        new Astroid(\n          this.parent,\n          { x: this.position.x, y: this.position.y },\n          ASTROID_MEDIUM\n        )\n      );\n      points = ASTROID_POINTS_LARGE;\n    } else if (this.options.r == ASTROIDS_MEDIUM) {\n      astroids.push(\n        new Astroid(\n          this.parent,\n          { x: this.position.x, y: this.position.y },\n          ASTROID_SMALL\n        )\n      );\n      astroids.push(\n        new Astroid(\n          this.parent,\n          { x: this.position.x, y: this.position.y },\n          ASTROID_SMALL\n        )\n      );\n      points = ASTROID_POINTS_MEDIUM;\n    } else {\n      points = ASTROID_POINTS_SMALL;\n    }\n\n    let index = astroids.indexOf(this);\n    astroids.splice(index, 1);\n\n    return points;\n  }\n}\n\nexport { AstroidPrefab };\n","import { ShipPrefab } from \"./ShipPrefab\";\nimport { AstroidPrefab } from \"./AstroidPrefab\";\n\nconst NUM_ASTROIDS = 4;\nconst ASTROID_SIZE = 100;\n\nlet canvas = new Dna.Canvas(document.getElementById(\"canvas\"));\n\nlet ship = new ShipPrefab(canvas);\n\nlet level = 0;\nlet astroids = [];\n\nfunction distBetweenPoints(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\ncreateAstroidBelt(canvas);\n\ncanvas.getContext().restore();\ncanvas.getContext().restore();\ncanvas.getContext().restore();\n\nfunction createAstroidBelt(canvas) {\n  astroids = [];\n  //astroidsTotal = (NUM_ASTROIDS + level) * 7;\n  //astroidsLeft = astroidsTotal;\n  let domCanvas = canvas.getContext().canvas;\n  let x, y;\n  let dist;\n\n  for (let i = 0; i < NUM_ASTROIDS + level; i++) {\n    do {\n      x = Math.random() * domCanvas.width - domCanvas.width / 2;\n      y = Math.random() * domCanvas.height - domCanvas.height / 2;\n      dist = distBetweenPoints(ship.transform.x, ship.transform.y, x, y);\n    } while (dist < ASTROID_SIZE + ship.r);\n    astroids.push(\n      new AstroidPrefab(\n        canvas,\n        {\n          x: x,\n          y: y\n        },\n        level\n      )\n    );\n  }\n}\n"]}