{"version":3,"sources":["demos/astroids/Triangle.js","demos/astroids/Ship.js","demos/astroids/Rollover.js","demos/astroids/BulletPrefab.js","demos/astroids/ShipPrefab.js","demos/astroids/Astroid.js","demos/astroids/AstroidPrefab.js","demos/astroids/astroids.js"],"names":["Triangle","options","size","fill","stroke","radius","ctx","gameObject","getContext","strokeStyle","lineWidth","beginPath","moveTo","lineTo","closePath","fillStyle","Dna","Component","TURN_SPEED","Ship","shipPrefab","keyboard","shootCooldown","shootCooldownMax","deltaTime","left","transform","rotation","addDegrees","right","up","toggleThruster","primary","canShoot","shoot","thrusting","acceleration","active","angle","Utilities","Radians","radians","Rollover","r","canvas","getCanvas","x","width","y","height","BULLET_SPEED","BULLET_RADIUS","BULLET_DISTANCE","BulletPrefab","parent","position","astroidHurtboxes","Components","Polygon","physics","Physics","speed","maxDistance","addComponent","hitbox","Hitcircle","hurtboxes","onCollisionEnter","astroid","destroy","GameObject","SHIP_COLOR","SHIP_SIZE","FRICTION","SHIP_RADIUS","SHIP_THRUST","SHOOT_COOLDOWN","ShipPrefab","ship","SimplePhysics","Acceleration","accel","friction","hurtbox","thruster","setActive","thrusterToggle","bullet","Math","sin","cos","console","log","Astroid","astroidPrefab","destroyAstroid","ASTROID_SPEED","ASTROID_VERT","ASTROID_JAG","ASTROID_POINTS_LARGE","ASTROID_POINTS_MEDIUM","ASTROID_POINTS_SMALL","ASTROID_LARGE","ASTROID_MEDIUM","ASTROID_SMALL","AstroidPrefab","level","shipHurtbox","levelMultiplier","vert","floor","random","jaggedness","hitboxSet","die","xv","yv","points","NUM_ASTROIDS","ASTROID_SIZE","Canvas","document","getElementById","input","Input","Keyboard","astroids","shiphurtbox","distBetweenPoints","x1","y1","x2","y2","sqrt","pow","createAstroidBelt","domCanvas","dist","i","push"],"mappings":"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","file":"astroids.1c324dd4.map","sourceRoot":"..","sourcesContent":["//TODO make a path component\nclass Triangle extends Dna.Component {\n  constructor(options) {\n    super();\n\n    this.size = options.size || 0;\n    this.fill = options.fill;\n    this.stroke = options.stroke;\n\n    this.radius = this.size / 2;\n  }\n\n  render() {\n    let ctx = this.gameObject.getContext();\n\n    ctx.strokeStyle = this.stroke;\n    ctx.lineWidth = this.size / 20;\n    ctx.beginPath();\n    ctx.moveTo(0, -this.radius);\n    ctx.lineTo((2 / 3) * this.radius, this.radius);\n    ctx.lineTo(-(2 / 3) * this.radius, this.radius);\n    ctx.closePath();\n    if (this.fill) {\n      ctx.fillStyle = this.fill;\n      ctx.fill();\n    }\n    ctx.stroke();\n  }\n}\n\nexport { Triangle };\n","const TURN_SPEED = 360;\n\nclass Ship extends Dna.Component {\n  constructor(shipPrefab, keyboard, shootCooldown) {\n    super();\n    this.shipPrefab = shipPrefab;\n    this.keyboard = keyboard;\n\n    this.shootCooldownMax = shootCooldown;\n    this.shootCooldown = 0;\n  }\n\n  update(deltaTime) {\n    this.shootCooldown -= deltaTime;\n\n    if (this.keyboard.left) {\n      this.shipPrefab.transform.rotation.addDegrees(-TURN_SPEED * deltaTime);\n    }\n    if (this.keyboard.right) {\n      this.shipPrefab.transform.rotation.addDegrees(TURN_SPEED * deltaTime);\n    }\n    if (this.keyboard.up) {\n      this.shipPrefab.toggleThruster(true);\n    } else {\n      this.shipPrefab.toggleThruster(false);\n    }\n\n    if (this.keyboard.primary && this.canShoot()) {\n      this.shipPrefab.shoot();\n      this.shootCooldown = this.shootCooldownMax;\n    }\n\n    if (this.shipPrefab.thrusting) {\n      this.shipPrefab.acceleration.active = true;\n      this.shipPrefab.acceleration.angle = new Dna.Utilities.Radians(\n        this.shipPrefab.transform.rotation.radians\n      );\n    } else {\n      this.shipPrefab.acceleration.active = false;\n    }\n  }\n\n  canShoot() {\n    return this.shootCooldown < 0;\n  }\n}\n\nexport { Ship };\n","class Rollover extends Dna.Component {\n  constructor(r) {\n    super();\n\n    this.r = r;\n  }\n\n  update(deltaTime) {\n    let canvas = this.gameObject.getCanvas();\n\n    if (this.gameObject.transform.x < -canvas.transform.width / 2 - this.r) {\n      this.gameObject.transform.x = canvas.transform.width / 2 + this.r;\n    } else if (\n      this.gameObject.transform.x >\n      canvas.transform.width / 2 + this.r\n    ) {\n      this.gameObject.transform.x = -canvas.transform.width / 2;\n    }\n    if (this.gameObject.transform.y < -canvas.transform.height / 2 - this.r) {\n      this.gameObject.transform.y = canvas.transform.height / 2 + this.r;\n    } else if (\n      this.gameObject.transform.y >\n      canvas.transform.height / 2 + this.r\n    ) {\n      this.gameObject.transform.y = -canvas.transform.height / 2;\n    }\n  }\n}\n\nexport { Rollover };\n","import { Rollover } from \"./Rollover\";\n\nconst BULLET_SPEED = 5;\nconst BULLET_RADIUS = 2;\nconst BULLET_DISTANCE = 500;\n\nclass BulletPrefab extends Dna.GameObject {\n  constructor(parent, position, angle, astroidHurtboxes) {\n    super(parent, position, [\n      new Dna.Components.Polygon({ radius: BULLET_RADIUS }),\n      new Rollover(BULLET_RADIUS)\n    ]);\n\n    let physics = new Dna.Components.Physics({\n      speed: BULLET_SPEED,\n      angle: angle,\n      maxDistance: BULLET_DISTANCE\n    });\n    this.addComponent(physics);\n    //this.addComponent(new Bullet(physics, BULLET_DISTANCE));\n\n    let hitbox = new Dna.Components.Hitcircle({\n      radius: BULLET_RADIUS,\n      hurtboxes: astroidHurtboxes,\n      onCollisionEnter: astroid => {\n        this.destroy();\n        astroid.gameObject.destroy();\n      }\n    });\n    this.addComponent(hitbox);\n  }\n}\n\nexport { BulletPrefab };\n","import { Triangle } from \"./Triangle\";\nimport { Ship } from \"./Ship\";\nimport { Rollover } from \"./Rollover\";\nimport { BulletPrefab } from \"./BulletPrefab\";\n\nconst SHIP_COLOR = \"black\";\nconst SHIP_SIZE = 30;\nconst FRICTION = 0.01;\nconst TURN_SPEED = 360; // degrees per second\nconst SHIP_RADIUS = SHIP_SIZE / 2;\nconst SHIP_THRUST = 0.1;\nconst SHOOT_COOLDOWN = 0.5;\n\nclass ShipPrefab extends Dna.GameObject {\n  constructor(parent, keyboard, astroidHurtboxes) {\n    super(parent, {}, [\n      new Triangle({ size: SHIP_SIZE, stroke: SHIP_COLOR }),\n      new Rollover(SHIP_RADIUS)\n      //new Dna.Components.Text({ text: \"shipship\" })\n    ]);\n\n    this.ship = new Ship(this, keyboard, SHOOT_COOLDOWN);\n    this.addComponent(this.ship);\n\n    let physics = new Dna.Components.SimplePhysics();\n    this.addComponent(physics);\n\n    this.acceleration = new Dna.Components.Acceleration(physics, {\n      accel: SHIP_THRUST,\n      //ya: SHIP_THRUST,\n      friction: FRICTION\n    });\n    this.addComponent(this.acceleration);\n\n    this.hurtbox = new Dna.Components.Hitcircle({ radius: SHIP_RADIUS });\n    this.addComponent(this.hurtbox);\n\n    this.thrusting = false;\n    this.thruster = new Dna.GameObject(this, { y: SHIP_SIZE * 0.75 }, [\n      new Triangle({\n        size: SHIP_RADIUS,\n        stroke: \"yellow\",\n        fill: \"red\"\n      })\n    ]);\n    this.thruster.setActive(false);\n\n    this.astroidHurtboxes = astroidHurtboxes;\n  }\n\n  toggleThruster(thrusterToggle) {\n    this.thrusting = thrusterToggle;\n    this.thruster.setActive(thrusterToggle);\n  }\n\n  shoot() {\n    let radians = this.transform.rotation.radians;\n    let bullet = new BulletPrefab(\n      this.parent,\n      {\n        x: this.transform.x + (4 / 3) * SHIP_RADIUS * Math.sin(radians),\n        y: this.transform.y - (4 / 3) * SHIP_RADIUS * Math.cos(radians)\n      },\n      new Dna.Utilities.Radians(this.transform.rotation.radians),\n      //radians,\n      this.astroidHurtboxes\n    );\n  }\n\n  die() {\n    //TODO explode, remove a life, sound, etc\n    console.log(\"ship dying\");\n  }\n}\n\nexport { ShipPrefab };\n","class Astroid extends Dna.Component {\n  constructor(astroidPrefab) {\n    super();\n\n    this.astroidPrefab = astroidPrefab;\n  }\n\n  onDestroy() {\n    this.astroidPrefab.destroyAstroid();\n  }\n}\n\nexport { Astroid };\n","import { Rollover } from \"./Rollover\";\nimport { Astroid } from \"./Astroid\";\n\nconst ASTROID_SPEED = 5; // max starting speed\nconst ASTROID_VERT = 10; // average num of verticies on each astroid\nconst ASTROID_JAG = 0.4; // jaggedness of astroids\nconst ASTROID_POINTS_LARGE = 20;\nconst ASTROID_POINTS_MEDIUM = 50;\nconst ASTROID_POINTS_SMALL = 100;\n\nconst ASTROID_LARGE = 50;\nconst ASTROID_MEDIUM = 25;\nconst ASTROID_SMALL = 12;\n\nclass AstroidPrefab extends Dna.GameObject {\n  constructor(\n    parent,\n    position,\n    level,\n    shipHurtbox,\n    astroidHurtboxes,\n    r = ASTROID_LARGE\n  ) {\n    let levelMultiplier = 1 + 0.1 * level;\n    super(parent, position, [\n      new Dna.Components.Polygon({\n        radius: r,\n        vert: Math.floor(Math.random() * (ASTROID_VERT + 1) + ASTROID_VERT / 2),\n        jaggedness: ASTROID_JAG\n      }),\n      new Dna.Components.Hitcircle({\n        radius: r,\n        hurtboxes: shipHurtbox,\n        hitboxSet: astroidHurtboxes,\n        onCollisionEnter: ship => {\n          ship.gameObject.die();\n        }\n      }),\n      //TODO regular physics class would make more sense here\n      new Dna.Components.SimplePhysics({\n        xv: (Math.random() - 0.5) * ASTROID_SPEED * levelMultiplier,\n        yv: (Math.random() - 0.5) * ASTROID_SPEED * levelMultiplier\n      }),\n      new Rollover(r)\n    ]);\n    let astroid = new Astroid(this);\n    this.addComponent(astroid);\n\n    this.r = r; //TODO store as size??\n\n    this.level = level;\n\n    this.shipHurtbox = shipHurtbox;\n    this.astroidHurtboxes = astroidHurtboxes;\n\n    this.hurtbox = new Dna.Components.Hitcircle({ radius: r });\n    this.addComponent(this.hurtbox);\n  }\n\n  //TODO this should be in astroids component, need way to access\n  destroyAstroid() {\n    let points = 0;\n    if (this.r == ASTROID_LARGE) {\n      new AstroidPrefab(\n        this.parent,\n        { x: this.transform.x, y: this.transform.y },\n        this.level,\n        this.shipHurtbox,\n        this.astroidHurtboxes,\n        ASTROID_MEDIUM\n      );\n      new AstroidPrefab(\n        this.parent,\n        { x: this.transform.x, y: this.transform.y },\n        this.level,\n        this.shipHurtbox,\n        this.astroidHurtboxes,\n        ASTROID_MEDIUM\n      );\n      points = ASTROID_POINTS_LARGE;\n    } else if (this.r == ASTROID_MEDIUM) {\n      new AstroidPrefab(\n        this.parent,\n        { x: this.transform.x, y: this.transform.y },\n        this.level,\n        this.shipHurtbox,\n        this.astroidHurtboxes,\n        ASTROID_SMALL\n      );\n      new AstroidPrefab(\n        this.parent,\n        { x: this.transform.x, y: this.transform.y },\n        this.level,\n        this.shipHurtbox,\n        this.astroidHurtboxes,\n        ASTROID_SMALL\n      );\n      points = ASTROID_POINTS_MEDIUM;\n    } else {\n      points = ASTROID_POINTS_SMALL;\n    }\n\n    //TODO check victory condition\n\n    return points;\n  }\n}\n\nexport { AstroidPrefab };\n","import { ShipPrefab } from \"./ShipPrefab\";\nimport { AstroidPrefab } from \"./AstroidPrefab\";\n\nconst NUM_ASTROIDS = 4;\nconst ASTROID_SIZE = 100;\n\nlet canvas = new Dna.Canvas(document.getElementById(\"canvas\"));\n\nlet input = {\n  87: \"up\",\n  83: \"down\",\n  65: \"left\",\n  68: \"right\",\n  32: \"primary\"\n  //up: 87,\n  //down: 83,\n  //left: 65,\n  //right: 68,\n  //primary: 32\n  //secondary: 17\n};\nlet keyboard = new Dna.Input.Keyboard(input);\n\nlet level = 0;\nlet astroids = [];\n\nlet astroidHurtboxes = [];\n\nlet ship = new ShipPrefab(canvas, keyboard, astroidHurtboxes);\nlet shiphurtbox = [ship.hurtbox];\n\n//TODO function of transform?\nfunction distBetweenPoints(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\ncreateAstroidBelt(canvas);\n\nfunction createAstroidBelt(canvas) {\n  astroids = [];\n  //astroidsTotal = (NUM_ASTROIDS + level) * 7;\n  //astroidsLeft = astroidsTotal;\n  let domCanvas = canvas.getContext().canvas;\n  let x, y;\n  let dist;\n\n  for (let i = 0; i < NUM_ASTROIDS + level; i++) {\n    do {\n      x = Math.random() * domCanvas.width - domCanvas.width / 2;\n      y = Math.random() * domCanvas.height - domCanvas.height / 2;\n      //TODO should use absolute distance\n      dist = distBetweenPoints(ship.transform.x, ship.transform.y, x, y);\n    } while (dist < ASTROID_SIZE + ship.r);\n    astroids.push(\n      new AstroidPrefab(\n        canvas,\n        {\n          x: x,\n          y: y\n        },\n        level,\n        shiphurtbox,\n        astroidHurtboxes\n      )\n    );\n  }\n}\n"]}